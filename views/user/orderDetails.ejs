<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>NOOR Fragrance - Product Details</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Akshar:wght@400;600&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <link rel="stylesheet" href="/styles/user/orderDetails.css">
</head>

<body>
  <%- include("../../views/partials/user/header") %>

  <div class="container-fluid user-dashboard">
    <div class="row">
      <div class="col-lg-2 mb-4">
        <%- include("../../views/partials/user/profileMenu") %>
      </div>

      <div class="col-lg-10">
        <!-- Order Details Header -->
        <div class="info-container">
          <div class="section-title">
            <span>Order Details <span class="text-muted">#<%= order.orderId %></span></span>
            <div class="action-buttons">
              <% if (order.status !=='Cancelled' && order.status !=='Delivered' && order.status !=='Return Request' &&
                  order.status !=='Returned' && order.status !=='Cancel requested' && order.status !=='Shipped' &&  order.status !=='Payment failed' ) { %>
              <button class="cancel-btn" id="cancelOrderBtn">
                <i class="fas fa-times"></i> Cancel Order
              </button>
              <%}else if(order.status==='Payment failed'){%>
              <button class="retry-btn" data-order-id="<%= order._id %>">
                <i class="fas fa-redo"></i> Retry Payment
              </button>
              <%}%>
                    <button class="invoice-btn" id="downloadInvoiceBtn">
                      <i class="fas fa-file-invoice"></i> Invoice
                    </button>
              </div>
            </div>

            <!-- Order Tracking -->
            <div class="order-track-wrapper">
              <div class="order-track">
                <div
                  class="order-track-step <%= order.status === 'Pending' || order.status === 'Processing' || order.status === 'Shipped' || order.status === 'Delivered' ? 'completed' : '' %>">
              <div class="order-track-step-dot">
                <i class="fas fa-check"></i>
              </div>
              <div class="order-track-text">Order Placed</div>
            </div>
            <div class="order-track-step <%= order.status === 'Processing' || order.status === 'Shipped' || order.status === 'Delivered' ? 'completed' : order.status === 'Pending' ? 'active' : '' %>">
              <div class="order-track-step-dot">
                <i class="<%= order.status === 'Processing' || order.status === 'Shipped' || order.status === 'Delivered' ? 'fas fa-check' : 'fas fa-spinner' %>"></i>
              </div>
              <div class="order-track-text">Processing</div>
            </div>
            <div class="order-track-step <%= order.status === 'Shipped' || order.status === 'Delivered' ? 'completed' : order.status === 'Processing' ? 'active' : '' %>">
              <div class="order-track-step-dot">
                <i class="<%= order.status === 'Shipped' || order.status === 'Delivered' ? 'fas fa-check' : 'fas fa-truck' %>"></i>
              </div>
              <div class="order-track-text">Shipped</div>
            </div>
            <div class="order-track-step <%= order.status === 'Delivered' ? 'completed' : order.status === 'Shipped' ? 'active' : '' %>">
              <div class="order-track-step-dot">
                <i class="<%= order.status === 'Delivered' ? 'fas fa-check' : 'fas fa-box' %>"></i>
              </div>
              <div class="order-track-text">Delivered</div>
            </div>
            <div class="order-track-progress">
              <div class="order-track-progress-bar" style="width: <%= order.status === 'Pending' ? '12%' : order.status === 'Processing' ? '38%' : order.status === 'Shipped' ? '75%' : order.status === 'Delivered' ? '100%' : order.status === 'Cancelled' ? '0%' : '0%' %>"></div>
            </div>
          </div>
        </div>

        <!-- Order Status Badge -->
        <div class="text-center mb-3">
          <% if(order.status==='Return Request' ){%>
          <span class="status-badge status-cancelrequested">
            <%= order.status %>
          </span>
          <%}else if(order.status==="Payment failed"){%>
          <span class="status-badge status-paymentfailed">
            <%= order.status %>
          </span>

          <%}else{%>
          <span class="status-badge status-<%= order.status.toLowerCase() %>">
            <%= order.status %>
          </span>
          <%}%>
                    <span class="ms-2 text-muted">Order Date: <%= new Date(order.createdOn).toLocaleDateString() %>
          </span>
        </div>
      </div>

      <!-- Address Details -->
      <div class="row mb-4">
        <div class="col-md-6 mb-3 mb-md-0">
          <div class="address-box">
            <div class="address-title">
              <i class="fas fa-map-marker-alt me-2"></i> Shipping Address
            </div>
            <div class="address-content">
              <%= address.name%>
              <br>
              <%= address.addressType %>, <%= address.landMark %>, <%= address.city %>
              <br>
              <%= address.state %>
              <%= address.pincode %>
              <br>
              <%= address.phone %> / <%= address.altPhone %>
              <br>
              Order Method : <%= order.orderType%>
              <br>

            </div>
          </div>
        </div>
      </div>

      <!-- Product Details -->
      <div class="info-container">
        <h3 class="section-title">Order Items</h3>

        <% order.orderedItems.forEach((item, index)=> { %>
        <% if (item.product) { %>
        <div class="product-card" style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; padding: 1rem; border: 1px solid #ddd; margin-bottom: 1rem; border-radius: 8px;">

          <!-- Left: Image + Info -->
          <div style="display: flex; flex: 1; gap: 1rem;">
            <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="product-image" style="width: 80px; height: 80px; object-fit: cover; border-radius: 6px;">

            <div class="product-details">
              <div class="product-name"><strong>
                  <%= item.product.productName %>
                </strong></div>
              <div class="product-meta">
                <span class="product-price">₹<%= item.price.toFixed(2) %></span> |
                <span class="product-quantity">Qty: <%= item.quantity %></span>
              </div>

              <div class="product-status">
               <%if(order.status==="Payment failed"){%>
                   <span class="status-badge status-paymentfailed">
            <%= order.status %>
          </span>
               <%}else{%>
                <span class="status-badge status-<%= item.status.toLowerCase().replace(/\s+/g, '-') %>">
                  <%= item.status %>
                </span>
               <%}%>
              </div>
            </div>
          </div>

          <!-- Right: Cancel Button / Reason -->
          <% if (['Pending', 'Processing' ].includes(item.status)) { %>
          <div class="button-right-align">
            <button class="btn btn-secondary" onclick="window.productOrderCancel('<%= item.product._id %>','<%= item.sku %>')">
              <i class="fas fa-times"></i> Cancel Order
            </button>
          </div>
          <% } else if (item.status==='Cancelled' ) { %>
          <div style="margin-left: auto; color: red; text-align: right;">
            <strong>Cancelled</strong>
          </div>
          <% } else if (order.status==='Cancelled' ) { %>
          <div style="margin-left: auto; color: red; text-align: right;">
            <strong>Cancelled</strong>
          </div>
          <% }else if(item.status==='Delivered'){%>
          <div class="button-right-align">
            <button class="btn btn-warning" onclick="window.productOrderReturn( '<%= order.orderId %>', '<%= item.product._id %>', '<%= item.sku %>')">
              <i class="fa-solid fa-rotate-left"></i> Return Order
            </button>
          </div>

          <%}else if(item.status==='Return Rejected'){%>
          <div>Reason:<%=item.returnRejectReason%></div>

          <%}%>
                </div>
                <% } else { %>
          <div class="product-card" style="padding: 1rem; border: 1px solid #ddd; margin-bottom: 1rem; border-radius: 8px;">
            <div class="product-name">Product not found</div>
          </div>
          <% } %>
          <% }); %>
        </div>


        <!-- Order Summary -->
        <div class="row mt-4">
          <div class="col-md-6 ms-auto">
            <div class="order-summary">
              <div class="summary-title">Order Summary</div>
              <div class="summary-row">
                <span>Subtotal</span>
                <span>₹<%= order.totalPrice.toFixed(2) %></span>
              </div>
              <div class="summary-row">
                <span>Coupon Discount:</span>
                <span>-₹<%= order.couponDiscount.toFixed(2) %></span>
              </div>
              <% if (order.offerDiscount) { %>
              <div class="summary-row">
                <span>Offer Discount:</span>
                <span>-₹<%= order.offerDiscount.toFixed(2)%></span>
              </div>
              <% } %>
              <div class="summary-row total">
                <span>Total</span>
                <span>₹<%= order.finalAmount.toFixed(2) %></span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  </div>

  <!-- Invoice Template for PDF Generation (Hidden) -->
  <div id="invoice-template" style="width: 800px; padding: 40px; font-family: Arial, sans-serif;">
    <div style="display: flex; justify-content: space-between; margin-bottom: 30px;">
      <div>
        <h1 style="margin: 0; color: #333;">INVOICE</h1>
        <p style="margin: 5px 0; color: #666;">NOOR Fragrance</p>
      </div>
      <div style="text-align: right;">
        <h2 style="margin: 0; color: #fd334e;">#<%= order.orderId %>
        </h2>
        <p style="margin: 5px 0; color: #666;">Date: <%= new Date(order.createdOn).toLocaleDateString() %>
        </p>
      </div>
    </div>

    <div style="display: flex; justify-content: space-between; margin-bottom: 30px;">
      <div style="width: 45%;">
        <h3 style="margin: 0 0 10px; color: #333;">Bill To:</h3>
        <p style="margin: 0; color: #666;">
          <%= order.address.name %>
        </p>

        <p style="margin: 0; color: #666;">
          <%= order.address.city %>, <%= order.address.state %>
          <%= order.address.zipCode %>
        </p>
        <p style="margin: 0; color: #666;">
          <%= order.address.country %>
        </p>
        <p style="margin: 0; color: #666;">Phone: <%= order.address.phone %>
        </p>
      </div>
      <div style="width: 45%;">
        <h3 style="margin: 0 0 10px; color: #333;">Payment Information:</h3>
        <p style="margin: 0; color: #666;">Status: <%= order.status %>
        </p>
        <p style="margin: 0; color: #666;"> Order Method : <%= order.orderType%>
        </p>

        <p style="margin: 0; color: #666;">Order Date: <%= new Date(order.createdOn).toLocaleDateString() %>
        </p>
        <% if (order.invoiceDate) { %>
        <p style="margin: 0; color: #666;">Invoice Date: <%= new Date(order.invoiceDate).toLocaleDateString() %>
        </p>
        <% } %>
      </div>
    </div>

    <table style="width: 100%; border-collapse: collapse; margin-bottom: 30px;">
      <thead>
        <tr style="background-color: #f8f9fa;">
          <th style="padding: 10px; text-align: left; border-bottom: 1px solid #ddd;">Product</th>
          <th style="padding: 10px; text-align: right; border-bottom: 1px solid #ddd;">Price</th>
          <th style="padding: 10px; text-align: right; border-bottom: 1px solid #ddd;">Qty</th>
          <th style="padding: 10px; text-align: right; border-bottom: 1px solid #ddd;">Total</th>
        </tr>
      </thead>
      <tbody>
        <% order.orderedItems.forEach(item=> { %>
        <tr>
          <td style="padding: 10px; border-bottom: 1px solid #eee;">
            <%= item.product.productName %>
          </td>
          <td style="padding: 10px; text-align: right; border-bottom: 1px solid #eee;">₹<%= item.price.toFixed(2) %>
          </td>
          <td style="padding: 10px; text-align: right; border-bottom: 1px solid #eee;">
            <%= item.quantity %>
          </td>
          <td style="padding: 10px; text-align: right; border-bottom: 1px solid #eee;">₹<%= (item.price *
                  item.quantity).toFixed(2) %>
          </td>
        </tr>
        <% }); %>
      </tbody>
    </table>

    <div style="margin-left: auto; width: 300px;">
      <div style="display: flex; justify-content: space-between; padding: 5px 0;">
        <span>Subtotal:</span>
        <span>₹<%= order.totalPrice.toFixed(2) %></span>
      </div>

      <% if (order.offerDiscount> 0) { %>
      <div style="display: flex; justify-content: space-between; padding: 5px 0;">
        <span>Offer Discount:</span>
        <span>-<%= order.offerDiscount.toFixed(2)%></span>
      </div>
      <% } %>
      <div style="display: flex; justify-content: space-between; padding: 5px 0;">
        <span>
          couponDiscount :
        </span>
        <span>-<%= order.couponDiscount.toFixed(2)%></span>
      </div>
      <div style="display: flex; justify-content: space-between; padding: 10px 0; font-weight: bold; border-top: 1px solid #ddd; margin-top: 5px;">
        <span>Total:</span>
        <span>₹<%= order.finalAmount.toFixed(2) %></span>
      </div>
    </div>

    <div style="margin-top: 40px; text-align: center; color: #666; font-size: 14px;">
      <p>Thank you for shopping with NOOR Fragrance!</p>
      <p>If you have any questions, please contact our customer service at support@noor.com</p>
    </div>
  </div>


  <div id="retryPaymentModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Retry Payment</h2>
        <span class="modal-close" id="closeRetryPaymentModal">&times;</span>
      </div>
      <p>Please complete the payment to process your order.</p>
      <button class="btn btn-primary" id="payNowBtn">Pay Now</button>
    </div>
  </div>


  <%- include("../../views/partials/user/footer") %>
</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Existing notyf initialization code
    const notyf = new Notyf({
      duration: 3000,
      position: {
        x: "right",
        y: "bottom",
      },
      types: [{
          type: "success",
          background: "#fd334e",
          icon: {
            className: "fas fa-check",
            tagName: "i",
            color: "white",
          },
        },
        {
          type: "error",
          background: "#dc3545",
          icon: {
            className: "fas fa-times",
            tagName: "i",
            color: "white",
          },
        },
      ],
    });

    // Status mapping for progress calculation
    const statusProgress = {
      "Pending": 0,
      "Processing": 1,
      "Shipped": 2,
      "Delivered": 3,
      "Cancelled": -1,
      "Cancel Requested": -1,
      "Return Request": 3,
      "Returned": 3,
      "Return Rejected": 3
    };

    // Get current status from the EJS data
    const currentStatus = "<%= order.status %>";
    const currentStep = statusProgress[currentStatus];

    // Invoice download functionality
    document.getElementById('downloadInvoiceBtn').addEventListener('click', function() {
      generateInvoicePDF();
    });

    // Modified Cancel order functionality
    const cancelOrderBtn = document.getElementById('cancelOrderBtn');
    if (cancelOrderBtn) {
      cancelOrderBtn.addEventListener('click', function() {
        Swal.fire({
          title: 'Cancel Order',
          html: `
              <p>Please provide a reason for cancellation:</p>
              <textarea id="cancellationReason" class="swal2-textarea" placeholder="Enter your reason here..."></textarea>
            `,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#fd334e',
          cancelButtonColor: '#6c757d',
          confirmButtonText: 'Yes, Cancel Order',
          cancelButtonText: 'No, Keep Order',
          preConfirm: () => {
            const reason = document.getElementById('cancellationReason').value;
            if (!reason.trim()) {
              Swal.showValidationMessage('Please provide a cancellation reason');
              return false;
            }
            return reason;
          }
        }).then((result) => {
          if (result.isConfirmed) {
            const cancellationReason = result.value;

            fetch('/cancelOrder/<%= order._id %>', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  reason: cancellationReason
                })
              })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  Swal.fire(
                    'Order Cancelled!',
                    'Your Order has been Cancelled.',
                    'success'
                  ).then(() => {
                    window.location.reload();
                  });
                } else {
                  Swal.fire(
                    'Error!',
                    data.message || 'There was an error cancelling your order.',
                    'error'
                  );
                }
              })
              .catch(error => {
                console.error('Error:', error);
                Swal.fire(
                  'Error!',
                  'There was an error processing your request.',
                  'error'
                );
              });
          }
        });
      });
    }

    // Return order functionality
    const returnOrderBtn = document.getElementById('returnOrderBtn');
    if (returnOrderBtn) {
      returnOrderBtn.addEventListener('click', function() {
        Swal.fire({
          title: 'Return Order',
          html: `
            <p>Please provide a reason for returning the product:</p>
            <textarea id="returnReason" class="swal2-textarea" placeholder="Enter your reason here..."></textarea>
          `,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#fd334e',
          cancelButtonColor: '#6c757d',
          confirmButtonText: 'Yes, Return Order',
          cancelButtonText: 'No, Keep Order',
          preConfirm: () => {
            const reason = document.getElementById('returnReason').value;
            if (!reason.trim()) {
              Swal.showValidationMessage('Please provide a return reason');
              return false;
            }
            return reason;
          }
        }).then((result) => {
          if (result.isConfirmed) {
            const returnReason = result.value;

            fetch('/returnOrder/<%= order._id %>', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  reason: returnReason
                })
              })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  Swal.fire(
                    'Return Requested!',
                    'Your return request has been submitted.',
                    'success'
                  ).then(() => {
                    window.location.reload();
                  });
                } else {
                  Swal.fire(
                    'Error!',
                    data.message || 'There was an error processing your return.',
                    'error'
                  );
                }
              })
              .catch(error => {
                console.error('Error:', error);
                Swal.fire(
                  'Error!',
                  'There was an error submitting your return request.',
                  'error'
                );
              });
          }
        });
      });
    }

    // Product order cancel function
    window.productOrderCancel = function(productId, sku) {
      Swal.fire({
        title: 'Cancel This Item?',
        html: `
          <p>Please provide a reason for cancelling this item:</p>
          <textarea id="cancellationReason" class="swal2-textarea" placeholder="Enter your reason here..."></textarea>
        `,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#fd334e',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, Cancel Item',
        cancelButtonText: 'No, Keep It',
        preConfirm: () => {
          const reason = document.getElementById('cancellationReason').value;
          if (!reason.trim()) {
            Swal.showValidationMessage('Please provide a cancellation reason');
            return false;
          }
          return reason;
        }
      }).then((result) => {
        if (result.isConfirmed) {
          const cancellationReason = result.value;

          fetch(`/productCancelOrder`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                reason: cancellationReason,
                orderId: '<%= order._id %>',
                productId: productId,
                sku
              })
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                Swal.fire(
                  'Cancelled!',
                  'The item has been cancelled.',
                  'success'
                ).then(() => window.location.reload());
              } else {
                Swal.fire(
                  'Error!',
                  data.message || 'Could not cancel the item.',
                  'error'
                );
              }
            })
            .catch(err => {
              console.error(err);
              Swal.fire('Error!', 'Something went wrong.', 'error');
            });
        }
      });
    }

    // Product order return function
    window.productOrderReturn = function(orderId, productId, sku) {
      Swal.fire({
        title: 'Return This Item?',
        html: `
          <p>Please provide a reason for returning this item:</p>
          <textarea id="returnReason" class="swal2-textarea" placeholder="Enter your reason here..."></textarea>
        `,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#fd334e',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, Return Item',
        cancelButtonText: 'No, Keep It',
        preConfirm: () => {
          const reason = document.getElementById('returnReason').value;
          if (!reason.trim()) {
            Swal.showValidationMessage('Please provide a return reason');
            return false;
          }
          return reason;
        }
      }).then((result) => {
        if (result.isConfirmed) {
          const returnReason = result.value;

          fetch(`/productReturnOrder`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                reason: returnReason,
                orderId: orderId,
                productId: productId,
                sku: sku
              })
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                Swal.fire(
                  'Return Requested!',
                  'Your return request for the item has been submitted.',
                  'success'
                ).then(() => window.location.reload());
              } else {
                Swal.fire(
                  'Error!',
                  data.message || 'Could not process the return request.',
                  'error'
                );
              }
            })
            .catch(err => {
              console.error(err);
              Swal.fire('Error!', 'Something went wrong.', 'error');
            });
        }
      });
    }



    function openRetryPaymentModal(orderId) {
      console.log('Opening retry payment modal for order:', orderId);
      currentOrderId = orderId;
      document.getElementById('retryPaymentModal').style.display = 'flex';
    }

    function closeRetryPaymentModal() {
      document.getElementById('retryPaymentModal').style.display = 'none';
    }



    async function initiateRetryPayment() {
      if (!currentOrderId) {
        notyf.error('No order selected for payment.');
        closeRetryPaymentModal();
        return;
      }

      try {
        const response = await fetch('/retryRazorpayPayment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            orderId: currentOrderId
          }),
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const data = await response.json();

        if (!data.success) {
          notyf.error(data.message || 'Failed to initiate payment.');
          closeRetryPaymentModal();
          return;
        }

        const options = {
          key: data.razorpayKey, // Use key from server
          amount: data.amount * 100,
          currency: 'INR',
          name: 'NOOR Fragrance',
          description: `Retry Payment for Order #${currentOrderId}`,
          order_id: data.razorpayOrderId,
          handler: async function(response) {
            try {
              const verifyResponse = await fetch('/verifyRetryPayment', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  orderId: currentOrderId,
                  razorpay_payment_id: response.razorpay_payment_id,
                  razorpay_order_id: response.razorpay_order_id,
                  razorpay_signature: response.razorpay_signature,
                }),
              });

              if (!verifyResponse.ok) {
                throw new Error('Verification response was not ok');
              }

              const verifyData = await verifyResponse.json();

              if (verifyData.success) {
                notyf.success('Payment successful!');
                window.location.href = verifyData.redirect;
              } else {
                notyf.error(verifyData.message || 'Payment verification failed.');
                window.location.href = verifyData.redirect;
              }
            } catch (error) {
              console.error('Error verifying payment:', error);
              notyf.error('Failed to verify payment.');
              window.location.href = `/orderFailed?orderId=${currentOrderId}&message=${encodeURIComponent('Payment verification failed.')}&errorCode=PAYMENT_VERIFICATION_FAILED`;
            }
          },
          prefill: {
            name: '<%= order.address.name %>',
            email: '<%= user.email %>',
            contact: '<%= order.address.phone %>',
          },
          theme: {
            color: '#fd334e',
          },
          modal: {
            ondismiss: async () => {
              try {
                await fetch('/updateFailedPayment', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    orderId: currentOrderId,
                    errorCode: 'PAYMENT_CANCELLED',
                    errorDescription: 'Payment cancelled by user.',
                  }),
                });
              } catch (error) {
                console.error('Error notifying server of cancelled payment:', error);
              }

              notyf.error('Payment cancelled by user.');
              window.location.href = `/orderFailed?orderId=${currentOrderId}&message=${encodeURIComponent('Payment cancelled by user.')}&errorCode=PAYMENT_CANCELLED`;
            },
          },
        };

        const rzp = new window.Razorpay(options);
        rzp.on('payment.failed', async function(response) {
          try {
            await fetch('/updateFailedPayment', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                orderId: currentOrderId,
                errorCode: response.error.code || 'PAYMENT_FAILED',
                errorDescription: response.error.description || 'Payment failed.',
              }),
            });
          } catch (error) {
            console.error('Error notifying server of failed payment:', error);
          }

          notyf.error(response.error.description || 'Payment failed.');
          window.location.href = `/orderFailed?orderId=${currentOrderId}&message=${encodeURIComponent(response.error.description || 'Payment failed.')}&errorCode=${response.error.code || 'PAYMENT_FAILED'}`;
        });

        rzp.open();
        closeRetryPaymentModal();
      } catch (error) {
        console.error('Error initiating retry payment:', error);
        notyf.error('Failed to initiate payment.');
        closeRetryPaymentModal();
      }
    }


    // Bind Retry Payment Button
    const retryBtn = document.querySelector('.retry-btn');
    if (retryBtn) {
      retryBtn.addEventListener('click', function() {
        const orderId = this.dataset.orderId;
        openRetryPaymentModal(orderId);
      });
    }

    // Bind Modal Close Button
    document.getElementById('closeRetryPaymentModal').addEventListener('click', closeRetryPaymentModal);

    // Bind Pay Now Button
    document.getElementById('payNowBtn').addEventListener('click', initiateRetryPayment);

    // Function to generate PDF invoice
    function generateInvoicePDF() {
      const {
        jsPDF
      } = window.jspdf;
      const element = document.getElementById('invoice-template');
      element.style.display = 'block';

      html2canvas(element, {
        scale: 2,
        logging: false,
        useCORS: true
      }).then(canvas => {
        element.style.display = 'none';
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF('p', 'mm', 'a4');
        const imgProps = pdf.getImageProperties(imgData);
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

        pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
        pdf.save(`NOOR_Invoice_<%= order.orderId %>.pdf`);
        notyf.success('Invoice downloaded successfully!');
      }).catch(error => {
        console.error('Error generating PDF:', error);
        notyf.error('Error generating invoice.');
      });
    }
  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Set timeout for 30 minutes (30 * 60 * 1000 ms)
    setTimeout(function() {
      const button = document.querySelector('.retry-btn');
      if (button) {
        button.remove(); // Remove the button after 30 minutes
      }
    }, 30 * 60 * 1000); // 30 minutes
  });
</script>



</html>