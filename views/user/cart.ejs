<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shopping Cart</title>
  <link rel="stylesheet" href="/styles/user/cart.css">
</head>

<body>
  <div class="header-partial">
    <%- include("../../views/partials/user/header") %>
  </div>

  <div class="container mt-4">
    <div class="breadcrumb">
      <a href="/">Home</a>
      <span>›</span>
      <strong>Cart</strong>
    </div>

    <form id="checkoutForm" action="/checkOut" method="GET">
      <div class="form-instructions">
        <p>Please fill in the fields below and click place order to complete your purchase!</p>
      </div>

      <table class="cart-table">
        <thead class="cart-table-header">
          <tr>
            <th>PRODUCT DETAILS</th>
            <th>PRICE</th>
            <th>QUANTITY</th>
            <th>SHIPPING</th>
            <th>DISCOUNT</th>
            <th>SUBTOTAL</th>
            <th>ACTION</th>
          </tr>
        </thead>
        <tbody class="cart-table-body">
          <% if (products && products.length > 0) { %>
          <% for(let i = 0; i < products.length; i++) { %>
          <tr>
            <td data-label="PRODUCT DETAILS">
              <div class="product">
                <div class="product-image">
                  <img src="<%= products[i].productImage[0] %>" alt="<%= products[i].productName %>">
                </div>
                <div class="product-info">
                  <div class="title">
                    <%= products[i].productName %>
                    <input type="hidden" name="productName" value="<%= products[i].productName %>">
                    <input type="hidden" name="productId" value="<%= products[i]._id %>">
                  </div>
                  <div class="size">
                    <%= products[i].selectedSize %>ml
                    <input type="hidden" name="size" value="<%= products[i].selectedSize %>">
                  </div>
                </div>
              </div>
            </td>
            <td data-label="PRICE" class="price">
              <% if (products[i].bestOffer) { %>
              <span class="original-price">₹<%= products[i].originalPrice.toFixed(2) %></span>
              <span class="discounted-price">₹<%= products[i].discountedPrice.toFixed(2) %></span>
              <% } else { %>
              <span class="discounted-price">₹<%= products[i].cartPrice.toFixed(2) %></span>
              <% } %>
              <input type="hidden" name="price" value="<%= products[i].discountedPrice %>">
            </td>
            <td data-label="QUANTITY">
              <% if (products[i].status === 'out of stock' || products[i].variantQuantity === 0) { %>
              <span style="color: #e74c3c; font-weight: 600;">Out of Stock</span>
              <% } else { %>
              <div class="quantity">
                <button type="button" class="quantity-btn" onclick="decreaseQuantity(this)">-</button>
                <input type="number" class="quantity-input" value="<%= products[i].cartQuantity %>" min="1" max="5" name="quantity" data-product-id="<%= products[i]._id %>" data-size="<%= products[i].selectedSize %>" readonly>
                <button type="button" class="quantity-btn" onclick="increaseQuantity(this)">+</button>
              </div>
              <% } %>
            </td>
            <td data-label="SHIPPING" class="shipping">FREE</td>
            <td data-label="DISCOUNT" class="offer">
              <% if (products[i].bestOffer) { %>
              <span>
                <%= products[i].offerPercentage %>% OFF
              </span>
              <% } else { %>
              <span>No offers available</span>
              <% } %>
            </td>
            <td data-label="SUBTOTAL" class="subtotal">
              ₹<span class="subtotal-value">
                <% if (products[i].bestOffer) { %>
                <%= (products[i].discountedPrice * products[i].cartQuantity).toFixed(2) %>
                <% } else { %>
                <%= products[i].cartTotalPrice.toFixed(2) %>
                <% } %>
              </span>
              <input type="hidden" name="subtotal" class="subtotal-input" value="<% if (products[i].bestOffer) { %><%= (products[i].discountedPrice * products[i].cartQuantity).toFixed(2) %><% } else { %><%= products[i].cartTotalPrice.toFixed(2) %><% } %>">
            </td>
            <td data-label="ACTION" class="action">
              <button class="btn delete-btn" data-id="<%= products[i]._id %>" data-size="<%= products[i].selectedSize %>" type="button">
                <h4><i class="fa-solid fa-xmark"></i></h4>
              </button>
            </td>
          </tr>
          <% } %>
          <% } else { %>
          <tr>
            <td colspan="7" style="text-align: center; padding: 30px;">
              Your cart is empty. <a href="/shop">Continue shopping</a>
            </td>
          </tr>
          <% } %>
        </tbody>
      </table>

      <div class="cart-actions-container ">
        <div class="order-summary">
          <h3 class="summary-title">Order Summary</h3>
          <div class="summary-row">
            <div>Total</div>
            <div class="total-amount">₹<%= orderSummary.total %></div>
          </div>
          <div class="summary-row">
            <div>Shipping</div>
            <div class="shipping-cost">₹<%= orderSummary.shipping %></div>
          </div>
          <div class="summary-row">
            <div>Discount</div>
            <div class="discount-amount">-₹<%= orderSummary.discount %></div>
            <input type="hidden" name="totalDiscount" value="<%= orderSummary.discount %>">
          </div>
          <div class="summary-row total">
            <div>Grand Total</div>
            <div class="grand-total">₹<%= orderSummary.grandTotal %></div>
          </div>
          <button class="checkout-btn">Proceed To Checkout</button>
        </div>
      </div>
    </form>
  </div>

  <div class="footer-partial">
    <%- include("../../views/partials/user/footer") %>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    // Format currency for display
    const formatCurrency = (value) => `₹${parseFloat(value).toFixed(2)}`;

    // Update order summary display
    function updateOrderSummary(orderSummary) {
      const totalElement = document.querySelector('.order-summary .total-amount');
      const shippingElement = document.querySelector('.order-summary .shipping-cost');
      const discountElement = document.querySelector('.order-summary .discount-amount');
      const grandTotalElement = document.querySelector('.order-summary .grand-total');

      totalElement.textContent = formatCurrency(orderSummary.total);
      shippingElement.textContent = formatCurrency(orderSummary.shipping);
      discountElement.textContent = `-₹${orderSummary.discount}`;
      grandTotalElement.textContent = formatCurrency(orderSummary.grandTotal);
    }

    // Handle quantity change via backend
    async function updateQuantity(input, newQuantity) {
      const productId = input.dataset.productId;
      const size = input.dataset.size;

      try {
        const response = await fetch('/cartQuantityCheck', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            productId,
            size,
            quantity: newQuantity
          }),
        });

        const data = await response.json();

        if (data.success) {
          // Update quantity input
          input.value = data.quantity;

          // Update subtotal
          const row = input.closest('tr');
          const subtotalValue = row.querySelector('.subtotal-value');
          const subtotalInput = row.querySelector('.subtotal-input');
          subtotalValue.textContent = data.subtotal;
          subtotalInput.value = data.subtotal;

          // Update order summary
          updateOrderSummary(data.orderSummary);
        } else {
          input.value = input.defaultValue; // Revert to previous value
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'Failed to update quantity.',
          });
        }
      } catch (error) {
        input.value = input.defaultValue; // Revert to previous value
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to update quantity.',
        });
        console.error(error);
      }
    }

    function increaseQuantity(button) {
      const input = button.parentElement.querySelector('.quantity-input');
      const currentVal = parseInt(input.value);
      if (currentVal < 5) {
        updateQuantity(input, currentVal + 1);
      }
    }

    function decreaseQuantity(button) {
      const input = button.parentElement.querySelector('.quantity-input');
      const currentVal = parseInt(input.value);
      if (currentVal > 1) {
        updateQuantity(input, currentVal - 1);
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      const quantityInputs = document.querySelectorAll('.quantity-input');

      // Prevent manual input and enforce button usage
      quantityInputs.forEach(input => {
        input.addEventListener('change', function(e) {
          e.preventDefault();
          this.value = this.defaultValue; // Reset to previous value
        });
      });

      // Delete functionality
      const deleteButtons = document.querySelectorAll('.delete-btn');
      deleteButtons.forEach(button => {
        button.addEventListener('click', function(event) {
          event.preventDefault();
          const productId = this.getAttribute('data-id');
          const size = this.getAttribute('data-size');

          Swal.fire({
            title: 'Are you sure?',
            text: "This product will be removed from the cart.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/deleteFromCart`, {
                  method: 'DELETE',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    productId,
                    size
                  })
                })
                .then(response => response.json())
                .then(data => {
                  if (data.success) {
                    Swal.fire('Deleted!', 'Item has been removed.', 'success')
                      .then(() => location.reload());
                  } else {
                    Swal.fire('Error', data.message || 'Something went wrong.', 'error');
                  }
                })
                .catch(err => {
                  Swal.fire('Error', 'Failed to delete the item.', 'error');
                  console.error(err);
                });
            }
          });
        });
      });

      // Toggle coupons dropdown
      document.getElementById('toggleCoupons').addEventListener('click', function() {
        const couponsContainer = document.getElementById('couponsContainer');
        const header = this;
        const isOpen = couponsContainer.classList.contains('open');

        if (isOpen) {
          couponsContainer.classList.remove('open');
          header.classList.remove('open');
        } else {
          couponsContainer.classList.add('open');
          header.classList.add('open');
        }
      });

      // Copy coupon code to clipboard
      document.querySelectorAll('.copy-coupon-btn').forEach(button => {
        button.addEventListener('click', function() {
          const code = this.getAttribute('data-code');
          navigator.clipboard.writeText(code).then(() => {
            Swal.fire({
              icon: 'success',
              title: 'Copied!',
              text: `Coupon code ${code} copied to clipboard.`,
              timer: 1500,
              showConfirmButton: false
            });
            // Auto-fill the coupon input
            document.getElementById('couponInput').value = code;
          }).catch(err => {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to copy coupon code.',
            });
            console.error(err);
          });
        });
      });

      // Handle checkout button with fetch
      const checkoutForm = document.getElementById('checkoutForm');
      const checkoutBtn = document.querySelector('.checkout-btn');

      checkoutForm.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent default form submission

        // Collect form data
        const formData = new FormData(checkoutForm);
        const data = {};
        formData.forEach((value, key) => {
          if (data[key]) {
            if (!Array.isArray(data[key])) {
              data[key] = [data[key]];
            }
            data[key].push(value);
          } else {
            data[key] = value;
          }
        });

        // Convert to query string
        const queryParams = new URLSearchParams();
        for (const [key, value] of Object.entries(data)) {
          if (Array.isArray(value)) {
            value.forEach((val, index) => {
              queryParams.append(`${key}[${index}]`, val);
            });
          } else {
            queryParams.append(key, value);
          }
        }

        // Show loading alert
        Swal.fire({
          title: 'Processing...',
          text: 'Please wait while we prepare your checkout.',
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          }
        });

        // Fetch request to /checkOut
        fetch(`/checkOut?${queryParams.toString()}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          Swal.close();
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Checkout Initiated',
              text: 'Redirecting to checkout page...',
              timer: 1500,
              showConfirmButton: false
            }).then(() => {
              window.location.href = data.redirectUrl || '/checkOutPage';
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || 'Failed to proceed to checkout.'
            });
          }
        })
        .catch(error => {
          Swal.close();
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while processing your request.'
          });
          console.error('Checkout error:', error);
        });
      });
    });
  </script>
</body>

</html>