<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>NOOR Fragrance - Add Address</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Akshar:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
  <style>
    :root {
      --primary: #fd334e;
      --primary-dark: #e62b42;
      --primary-light: rgba(253, 51, 78, 0.1);
      --secondary: #333333;
      --light-gray: #f9f9f9;
      --mid-gray: #e0e0e0;
      --dark-gray: #807d7e;
      --white: #ffffff;
      --border-radius: 10px;
      --box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      --transition: all 0.3s ease;
    }

    body {
      font-family: "Akshar", sans-serif;
      background-color: var(--light-gray);
      color: var(--secondary);
      line-height: 1.6;
      font-weight: 400;
    }

    .user-dashboard {
      padding: 40px 0;
    }

    .info-container {
      background-color: var(--white);
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      padding: 35px;
      position: relative;
      overflow: hidden;
    }

    .info-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 5px;
      background: linear-gradient(to right, var(--primary), var(--primary-dark));
    }

    .section-title {
      font-size: 28px;
      font-weight: 600;
      margin-bottom: 30px;
      color: var(--secondary);
      padding-bottom: 15px;
      border-bottom: 1px solid var(--mid-gray);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .back-btn {
      color: var(--primary);
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 15px;
      font-weight: 500;
      padding: 8px 16px;
      border-radius: 6px;
      border: 1px solid var(--primary);
      transition: var(--transition);
    }

    .back-btn:hover {
      background-color: var(--primary-light);
      transform: translateX(-3px);
    }

    .form-container {
      max-width: 900px;
      margin: 0 auto;
    }

    .form-section {
      margin-bottom: 35px;
      padding-bottom: 25px;
      border-bottom: 1px dashed var(--mid-gray);
    }

    .form-section:last-child {
      border-bottom: none;
      margin-bottom: 0;
      padding-bottom: 0;
    }

    .form-section-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 20px;
      color: var(--secondary);
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .form-section-title i {
      color: var(--primary);
    }

    .form-group {
      margin-bottom: 22px;
    }

    .form-group label {
      display: block;
      font-weight: 500;
      color: var(--secondary);
      margin-bottom: 8px;
      font-size: 15px;
    }

    .form-group label .required {
      color: var(--primary);
      margin-left: 3px;
    }

    .form-control {
      width: 100%;
      padding: 12px 15px;
      border-radius: 8px;
      border: 1.5px solid var(--mid-gray);
      transition: var(--transition);
      font-family: "Akshar", sans-serif;
      font-size: 15px;
      background-color: var(--white);
    }

    .form-control:focus {
      border-color: var(--primary);
      outline: none;
      box-shadow: 0 0 0 3px var(--primary-light);
    }

    .form-row {
      display: flex;
      gap: 20px;
      margin-bottom: 0;
    }

    .form-row .form-group {
      flex: 1;
    }

    .submit-btn {
      background: linear-gradient(to right, var(--primary), var(--primary-dark));
      color: var(--white);
      border: none;
      padding: 14px 30px;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      width: 100%;
      font-family: "Akshar", sans-serif;
      letter-spacing: 0.5px;
      margin-top: 15px;
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 10px;
      box-shadow: 0 4px 10px rgba(253, 51, 78, 0.3);
    }

    .submit-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 15px rgba(253, 51, 78, 0.4);
    }

    .submit-btn:active {
      transform: translateY(0);
    }

    .invalid-feedback {
      color: var(--primary);
      font-size: 13px;
      margin-top: 5px;
      display: none;
    }

    .form-control.is-invalid {
      border-color: var(--primary);
      background-image: none;
    }

    .form-control.is-invalid+.invalid-feedback {
      display: block;
    }

    .address-type-options {
      display: flex;
      gap: 15px;
      margin-bottom: 20px;
    }

    .form-check-inline {
      margin-right: 0;
    }

    .form-check-input[type="radio"] {
      border-color: var(--mid-gray);
    }

    .form-check-input:checked {
      background-color: var(--primary);
      border-color: var(--primary);
    }

    .form-check-label {
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 5px;
      cursor: pointer;
    }

    .form-check-label i {
      color: var(--primary);
    }

    .progress-container {
      width: 100%;
      margin-bottom: 30px;
    }

    .progress-bar {
      height: 5px;
      background-color: var(--mid-gray);
      border-radius: 5px;
      position: relative;
      overflow: hidden;
    }

    .progress-bar .progress {
      position: absolute;
      height: 100%;
      width: 50%;
      background: linear-gradient(to right, var(--primary), var(--primary-dark));
      border-radius: 5px;
    }

    @media (max-width: 991px) {
      .info-container {
        padding: 25px;
      }
    }

    @media (max-width: 767px) {
      .user-dashboard {
        padding: 20px 0;
      }

      .info-container {
        padding: 20px 15px;
      }

      .section-title {
        flex-direction: column;
        gap: 15px;
        align-items: flex-start;
        font-size: 24px;
        margin-bottom: 20px;
      }

      .form-row {
        flex-direction: column;
        gap: 0;
      }

      .address-type-options {
        flex-direction: column;
        gap: 10px;
      }
    }

    .floating-label {
      position: relative;
    }

    .floating-label label {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      left: 15px;
      background-color: var(--white);
      padding: 0 5px;
      font-size: 14px;
      transition: var(--transition);
      pointer-events: none;
      margin-bottom: 0;
    }

    .floating-label .form-control:focus+label,
    .floating-label .form-control:not(:placeholder-shown)+label {
      top: 0;
      transform: translateY(-50%);
      font-size: 12px;
      color: var(--primary);
    }

    .floating-label .form-control:focus+label {
      color: var(--primary);
    }

    .help-text {
      color: var(--dark-gray);
      font-size: 12px;
      margin-top: 5px;
    }

    .custom-checkbox {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-top: 20px;
      cursor: pointer;
    }

    .custom-checkbox input {
      position: absolute;
      opacity: 0;
      cursor: pointer;
      height: 0;
      width: 0;
    }

    .checkmark {
      height: 18px;
      width: 18px;
      background-color: var(--light-gray);
      border: 1.5px solid var(--mid-gray);
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: var(--transition);
    }

    .custom-checkbox input:checked~.checkmark {
      background-color: var(--primary);
      border-color: var(--primary);
    }

    .checkmark:after {
      content: "";
      position: absolute;
      display: none;
      width: 5px;
      height: 10px;
      border: solid white;
      border-width: 0 2px 2px 0;
      transform: rotate(45deg);
    }

    .custom-checkbox input:checked~.checkmark:after {
      display: block;
    }
  </style>
</head>

<body>

  <%- include("../../views/partials/user/header") %>

    <div class="container-fluid user-dashboard">
      <div class="row gx-4">
        <div class="col-lg-2 mb-4">
          <%- include("../../views/partials/user/profileMenu") %>
        </div>

        <div class="col-lg-10">
          <div class="info-container">
            <h2 class="section-title">
              Add New Address
              <a href="/address" class="back-btn">
                <i class="fas fa-arrow-left"></i> Back to Addresses
              </a>
            </h2>

            <div class="progress-container">
              <div class="progress-bar">
                <div class="progress"></div>
              </div>
            </div>

            <div class="form-container">
              <form id="addAddressForm">
                <div class="form-section">
                  <h3 class="form-section-title">
                    <i class="fas fa-map-marker-alt"></i> Address Type
                  </h3>
                  <div class="address-type-options">
                    <div class="form-check form-check-inline">
                      <input class="form-check-input" type="radio" id="addressType-home" name="addressType"
                        value="Home">
                      <label class="form-check-label" for="addressType-home">
                        <i class="fas fa-home me-1"></i> Home
                      </label>
                    </div>
                    <div class="form-check form-check-inline">
                      <input class="form-check-input" type="radio" id="addressType-work" name="addressType"
                        value="Work">
                      <label class="form-check-label" for="addressType-work">
                        <i class="fas fa-briefcase me-1"></i> Work
                      </label>
                    </div>
                    <div class="form-check form-check-inline">
                      <input class="form-check-input" type="radio" id="addressType-other" name="addressType"
                        value="Other">
                      <label class="form-check-label" for="addressType-other">
                        <i class="fas fa-map-marker-alt me-1"></i> Other
                      </label>
                    </div>
                  </div>
                  <div class="invalid-feedback" id="addressType-error">Please select an address type</div>
                </div>

                <div class="form-section">
                  <h3 class="form-section-title">
                    <i class="fas fa-user"></i> Personal Information
                  </h3>

                  <div class="form-group">
                    <label for="name">Full Name <span class="required">*</span></label>
                    <input type="text" id="name" name="name" class="form-control">
                    <div class="invalid-feedback">Name must be 2-50 characters, letters, spaces, hyphens, or apostrophes
                      only</div>
                  </div>

                  <div class="form-row">
                    <div class="form-group">
                      <label for="phone">Phone Number <span class="required">*</span></label>
                      <input type="tel" id="phone" name="phone" class="form-control">
                      <div class="invalid-feedback">Enter a valid 10-digit phone number starting with 6-9, with at least
                        3 unique digits</div>
                      <div class="help-text">We'll use this as the primary contact number</div>
                    </div>
                    <div class="form-group">
                      <label for="altPhone">Alternative Phone <span class="required">*</span></label>
                      <input type="tel" id="altPhone" name="altPhone" class="form-control">
                      <div class="invalid-feedback">Enter a valid 10-digit alternative phone number, different from
                        primary</div>
                    </div>
                  </div>
                </div>

                <div class="form-section">
                  <h3 class="form-section-title">
                    <i class="fas fa-map"></i> Address Details
                  </h3>

                  <div class="form-row">
                    <div class="form-group">
                      <label for="city">City <span class="required">*</span></label>
                      <input type="text" id="city" name="city" class="form-control">
                      <div class="invalid-feedback">City must be 2-50 characters, letters, spaces, or hyphens only</div>
                    </div>
                    <div class="form-group">
                      <label for="state">State <span class="required">*</span></label>
                      <input type="text" id="state" name="state" class="form-control">
                      <div class="invalid-feedback">State must be 2-50 characters, letters, spaces, or hyphens only
                      </div>
                    </div>
                  </div>

                  <div class="form-row">
                    <div class="form-group">
                      <label for="landMark">Landmark <span class="required">*</span></label>
                      <input type="text" id="landMark" name="landMark" class="form-control">
                      <div class="invalid-feedback">Landmark must be 2-100 characters (letters, numbers, spaces, commas,
                        hyphens)</div>
                      <div class="help-text">Nearby recognizable location (e.g., mall, school, etc.)</div>
                    </div>
                    <div class="form-group">
                      <label for="pincode">Pincode <span class="required">*</span></label>
                      <input type="text" id="pincode" name="pincode" class="form-control">
                      <div class="invalid-feedback">Enter a valid 6-digit pincode with at least 2 unique digits</div>
                    </div>
                  </div>

                  <label class="custom-checkbox">
                    <input type="checkbox" name="isDefault" id="makeDefault">
                    <span class="checkmark"></span>
                    Set as default address for delivery
                  </label>
                </div>

                <button type="submit" class="submit-btn">
                  <i class="fas fa-check-circle"></i> Save Address
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>

    <%- include("../../views/partials/user/footer") %>

      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
      <script>
        document.addEventListener('DOMContentLoaded', function () {
          const form = document.getElementById('addAddressForm');

          const inputs = form.querySelectorAll('input, select');
          const progress = document.querySelector('.progress');

          function updateProgress() {
            const totalFields = inputs.length;
            let filledFields = 0;

            inputs.forEach(input => {
              if (input.value.trim() !== '' || (input.type === 'radio' && input.checked) || (input.type === 'checkbox' && input.checked)) {
                filledFields++;
              }
            });

            const progressPercentage = (filledFields / totalFields) * 100;
            progress.style.width = `${progressPercentage}%`;
          }

          inputs.forEach(input => {
            input.addEventListener('input', updateProgress);
            input.addEventListener('change', updateProgress);
          });

          updateProgress();

          // Helper function to check for unique digits
          function countUniqueDigits(value) {
            return new Set(value.split('')).size;
          }

          // Validation rules
          const validationRules = {
            name: {
              pattern: /^[A-Za-z\s]{2,50}$/, // Allows letters and spaces, 2-50 characters
              additionalCheck: (value) => !/(\s{2,})/.test(value), // Disallows consecutive spaces
              message: 'Name must be 2-50 characters, contain only letters and single spaces between words (no hyphens or special characters)'
            },
            phone: {
              pattern: /^[6-9]\d{9}$/, // Must start with 6-9 and be 10 digits
              additionalCheck: (value) => countUniqueDigits(value) >= 3,
              message: 'Phone must be 10 digits starting with 6-9 and contain at least 3 unique digits'
            },
            altPhone: {
              pattern: /^[6-9]\d{9}$/,
              additionalCheck: (value, form) => countUniqueDigits(value) >= 3 && value !== form.querySelector('#phone').value.trim(),
              message: 'Alternative phone must be 10 digits starting with 6-9, at least 3 unique digits, and different from primary phone'
            },
            city: {
              pattern: /^[A-Za-z]{2,50}$/, // Only letters, 2-50 characters
              additionalCheck: () => true,
              message: 'City must be 2-50 characters and contain letters only (no spaces or symbols)'
            },
            state: {
              pattern: /^[A-Za-z]{2,50}$/, // Only letters, 2-50 characters
              additionalCheck: () => true,
              message: 'State must be 2-50 characters and contain letters only (no spaces or symbols)'
            },
            landMark: {
              pattern: /^[A-Za-z0-9,\-\s]{6,100}$/, // Allows letters, numbers, commas, hyphens, and spaces, 2-100 characters
              additionalCheck: (value) => {
                const uniqueChars = new Set(value.replace(/[\s,\-]/g, '')).size; // Count unique alphanumeric characters
                return (
                  !/(\s{2,}|,{2,}|-{2,})/.test(value) && // Disallows consecutive spaces, commas, or hyphens
                  /[A-Za-z0-9]/.test(value) &&          // Ensures at least one alphanumeric character
                  uniqueChars >= 2                      // Requires at least 2 unique alphanumeric characters
                );
              },
              message:
                'Landmark must be 2-100 characters long, containing letters, numbers, commas, hyphens, or spaces, with at least 2 unique alphanumeric characters. Avoid consecutive spaces, commas, or hyphens.'
            },

            pincode: {
              pattern: /^\d{6}$/, // Exactly 6 digits
              additionalCheck: (value) => countUniqueDigits(value) >= 2,
              message: 'Pincode must be 6 digits with at least 2 unique digits'
            },
          };


          // Form validation and submission
          form.addEventListener('submit', function (e) {
            e.preventDefault();

            let isValid = true;
            const errors = [];

            // Validate address type
            const addressType = form.querySelector('input[name="addressType"]:checked');
            const addressTypeError = document.getElementById('addressType-error');
            if (!addressType) {
              addressTypeError.style.display = 'block';
              isValid = false;
              errors.push('Address Type');
            } else {
              addressTypeError.style.display = 'none';
            }

            // Validate all other fields
            Object.keys(validationRules).forEach(fieldId => {
              const input = document.getElementById(fieldId);
              const value = input.value.trim();
              const rule = validationRules[fieldId];

              if (!value) {
                input.classList.add('is-invalid');
                input.nextElementSibling.textContent = 'This field is required';
                isValid = false;
                errors.push(fieldId);
              } else if (!rule.pattern.test(value) || (rule.additionalCheck && !rule.additionalCheck(value, form))) {
                input.classList.add('is-invalid');
                input.nextElementSibling.textContent = rule.message;
                isValid = false;
                errors.push(fieldId);
              } else {
                input.classList.remove('is-invalid');
              }
            });

            if (isValid) {
              const submitBtn = form.querySelector('.submit-btn');
              const originalBtnText = submitBtn.innerHTML;
              submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
              submitBtn.disabled = true;

              const formData = new FormData(form);
              const addressData = {
                addressType: formData.get('addressType'),
                name: formData.get('name'),
                phone: formData.get('phone'),
                altPhone: formData.get('altPhone'),
                city: formData.get('city'),
                state: formData.get('state'),
                landMark: formData.get('landMark'),
                pincode: formData.get('pincode'),
                isDefault: formData.has('isDefault')
              };

              Swal.fire({
                title: 'Saving Address...',
                html: 'Please wait while we save your address.',
                allowOutsideClick: false,
                allowEscapeKey: false,
                didOpen: () => {
                  Swal.showLoading();
                }
              });

              fetch('/addAddress', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(addressData)
              })
                .then(response => response.json())
                .then(data => {
                  submitBtn.innerHTML = originalBtnText;
                  submitBtn.disabled = false;

                  if (data.success) {
                    Swal.fire({
                      icon: 'success',
                      title: 'Address Added Successfully',
                      text: 'Your shipping address has been saved to your account.',
                      confirmButtonColor: '#fd334e',
                      timer: 3000,
                      timerProgressBar: true
                    }).then(() => {
                      window.location.href = '/address';
                    });
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Oops...',
                      text: data.message || 'Something went wrong while saving your address!',
                      confirmButtonColor: '#fd334e'
                    });
                  }
                })
                .catch(error => {
                  submitBtn.innerHTML = originalBtnText;
                  submitBtn.disabled = false;

                  console.error('Error:', error);
                  Swal.fire({
                    icon: 'error',
                    title: 'Connection Error',
                    text: 'There was a problem connecting to the server. Please try again.',
                    confirmButtonColor: '#fd334e'
                  });
                });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Invalid Input',
                html: `Please correct the following fields:<br>${errors.map(e => `<b>${e.charAt(0).toUpperCase() + e.slice(1)}</b>`).join('<br>')}`,
                confirmButtonColor: '#fd334e'
              });

              const firstError = form.querySelector('.is-invalid');
              if (firstError) {
                firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                firstError.focus();
              }
            }
          });

          // Real-time validation
          inputs.forEach(input => {
            input.addEventListener('input', function () {
              const rule = validationRules[this.id];
              if (rule) {
                const value = this.value.trim();
                if (!value) {
                  this.classList.add('is-invalid');
                  this.nextElementSibling.textContent = 'This field is required';
                } else if (!rule.pattern.test(value) || (rule.additionalCheck && !rule.additionalCheck(value, form))) {
                  this.classList.add('is-invalid');
                  this.nextElementSibling.textContent = rule.message;
                } else {
                  this.classList.remove('is-invalid');
                }
              }

              // Real-time phone number comparison
              if (this.id === 'phone' || this.id === 'altPhone') {
                const phone = document.getElementById('phone');
                const altPhone = document.getElementById('altPhone');
                if (phone.value.trim() === altPhone.value.trim() && phone.value.trim() !== '') {
                  altPhone.classList.add('is-invalid');
                  altPhone.nextElementSibling.textContent = 'Alternative phone must be different from primary';
                } else if (validationRules.altPhone.pattern.test(altPhone.value.trim()) && validationRules.altPhone.additionalCheck(altPhone.value.trim(), form)) {
                  altPhone.classList.remove('is-invalid');
                }
              }
            });
          });

          // Address type validation on change
          form.querySelectorAll('input[name="addressType"]').forEach(radio => {
            radio.addEventListener('change', () => {
              document.getElementById('addressType-error').style.display = 'none';
            });
          });
        });
      </script>
</body>

</html>