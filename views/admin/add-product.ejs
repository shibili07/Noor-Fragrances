<%- include("../../views/partials/admin/header") %>

<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
  <style>
    :root {
      --primary-color: #4361ee;
      --primary-hover: #3a56d4;
      --secondary-color: #6c757d;
      --accent-color: #ff6b6b;
      --bg-color: #f8f9fa;
      --card-bg: #ffffff;
      --input-bg: #ffffff;
      --border-color: #e2e8f0;
      --text-color: #2d3748;
      --text-muted: #718096;
      --error-color: #e53e3e;
      --success-color: #38a169;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
    }

    .content-wrapper {
      padding: 20px;
      margin-top: 70px;
      margin-left: 280px;
      transition: all 0.3s ease;
      background-color: var(--bg-color);
      min-height: calc(100vh - 70px);
    }

    .section-title {
      color: var(--text-color);
      font-weight: 700;
      margin-bottom: 25px;
      position: relative;
      padding-bottom: 10px;
    }

    .section-title:after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 40px;
      height: 3px;
      background: var(--primary-color);
    }

    .card {
      border: none;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      margin-bottom: 25px;
      transition: all 0.3s ease;
      overflow: hidden;
      background-color: var(--card-bg);
    }

    .card:hover {
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
      transform: translateY(-3px);
    }

    .card-header {
      background-color: var(--card-bg);
      border-bottom: 1px solid var(--border-color);
      padding: 20px 25px;
    }

    .card-title {
      margin-bottom: 0;
      color: var(--text-color);
      font-weight: 600;
      font-size: 18px;
    }

    .card-body {
      padding: 25px;
      background-color: var(--card-bg);
    }

    .form-label {
      font-weight: 500;
      color: var(--text-color);
      margin-bottom: 8px;
      font-size: 14px;
    }

    .form-control,
    .form-select {
      border-radius: 8px;
      padding: 12px 15px;
      border: 1px solid var(--border-color);
      background-color: var(--input-bg);
      color: var(--text-color);
      font-size: 14px;
      transition: all 0.3s;
    }

    .form-control:focus,
    .form-select:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.15);
      background-color: var(--input-bg);
    }

    .required-label:after {
      content: '*';
      color: var(--error-color);
      margin-left: 4px;
    }

    .btn-publish {
      background: linear-gradient(45deg, var(--primary-color), var(--primary-hover));
      border: none;
      color: white;
      padding: 12px 30px;
      border-radius: 8px;
      font-weight: 500;
      transition: all 0.3s;
      box-shadow: 0 4px 6px rgba(67, 97, 238, 0.2);
    }

    .btn-publish:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 8px rgba(67, 97, 238, 0.25);
      background: linear-gradient(45deg, var(--primary-hover), var(--primary-color));
    }

    .btn-publish i {
      margin-right: 8px;
    }

    .error-message {
      color: var(--error-color);
      font-size: 12px;
      margin-top: 5px;
      display: none;
      animation: fadeIn 0.3s;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }

    .thumbnails-container {
      display: flex;
      overflow-x: auto;
      padding: 15px;
      gap: 15px;
      background-color: #f8fafc;
      border-radius: 8px;
      margin-top: 15px;
    }

    .thumbnail {
      border-radius: 8px;
      border: 1px solid var(--border-color);
      padding: 5px;
      transition: all 0.3s;
      width: 100px;
      height: 100px;
      background-size: cover;
      background-position: center;
      position: relative;
    }

    .thumbnail:hover {
      border-color: var(--primary-color);
      transform: scale(1.05);
    }

    .image-upload-container {
      border: 2px dashed var(--border-color);
      border-radius: 8px;
      padding: 25px;
      text-align: center;
      transition: all 0.3s;
      background-color: #f8fafc;
      margin-bottom: 20px;
    }

    .image-upload-container:hover {
      border-color: var(--primary-color);
      background-color: rgba(67, 97, 238, 0.05);
    }

    .price-input-group {
      position: relative;
    }

    .price-input-group input {
      padding-left: 30px;
    }

    .price-input-group:before {
      content: 'â‚¹';
      position: absolute;
      left: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-muted);
      z-index: 10;
    }

    .form-section {
      padding: 20px 0;
      border-bottom: 1px solid var(--border-color);
    }

    .form-section:last-child {
      border-bottom: none;
    }

    .form-section-title {
      font-weight: 600;
      color: var(--text-color);
      margin-bottom: 20px;
      font-size: 16px;
    }

    .image-preview-container {
      display: flex;
      gap: 15px;
      margin-bottom: 15px;
      flex-wrap: wrap;
    }

    .size-options {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 15px;
    }

    .size-option {
      display: inline-block;
      padding: 10px 15px;
      border: 1px solid var(--border-color);
      background-color: var(--input-bg);
      color: var(--text-color);
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s;
    }

    .size-option:hover {
      border-color: var(--primary-color);
    }

    .size-option.active {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }

    .btn-back-inline {
      background-color: var(--secondary-color);
      border: none;
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      font-weight: 500;
      transition: all 0.3s;
      box-shadow: 0 4px 6px rgba(108, 117, 125, 0.2);
      display: flex;
      justify-content: center;
      align-items: center;
      flex: 1;
    }

    .btn-back-inline:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 8px rgba(108, 117, 125, 0.25);
      background-color: #5a6268;
      color: white;
    }

    .btn-back-inline i {
      margin-right: 8px;
    }

    .button-group {
      display: flex;
      gap: 15px;
      width: 100%;
    }

    .btn-publish-inline {
      flex: 2;
    }

    .image-wrapper {
      position: relative;
    }

    .delete-image-btn {
      position: absolute;
      top: -10px;
      right: -10px;
      background-color: var(--accent-color);
      color: white;
      border: none;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 14px;
      z-index: 10;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .delete-image-btn:hover {
      background-color: #e53e3e;
    }

    @media screen and (max-width: 1200px) {
      .content-wrapper {
        margin-left: 0;
      }
    }

    @media screen and (max-width: 992px) {
      .card-body {
        padding: 20px;
      }
    }

    @media screen and (max-width: 768px) {
      .section-title {
        font-size: 20px;
      }

      .form-section-title {
        font-size: 16px;
      }

      .form-control,
      .form-select {
        padding: 10px 12px;
      }

      .btn-publish {
        width: 100%;
      }
    }

    @media screen and (max-width: 576px) {
      .content-wrapper {
        padding: 15px;
      }

      .card {
        border-radius: 10px;
      }

      .card-body {
        padding: 15px;
      }

      .button-group {
        flex-direction: column;
      }

      .btn-back-inline,
      .btn-publish-inline {
        width: 100%;
      }
    }

    .crop-modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.5);
    }

    .crop-modal-content {
      position: relative;
      background-color: var(--card-bg);
      margin: 5% auto;
      padding: 20px;
      width: 80%;
      max-width: 600px;
      border-radius: 8px;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }

    .crop-container {
      width: 100%;
      height: 400px;
      margin-bottom: 20px;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      overflow: hidden;
    }

    .crop-container img {
      max-width: 100%;
      max-height: 100%;
    }

    .crop-buttons {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }

    .crop-btn {
      padding: 8px 16px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
      font-weight: 500;
    }

    .crop-btn-cancel {
      background-color: var(--secondary-color);
      color: white;
    }

    .crop-btn-crop {
      background-color: var(--primary-color);
      color: white;
    }

    .close-modal {
      position: absolute;
      top: 10px;
      right: 15px;
      font-size: 24px;
      color: var(--text-muted);
      cursor: pointer;
    }

    .close-modal:hover {
      color: var(--text-color);
    }

    .select2-container--default .select2-selection--multiple {
      background-color: var(--input-bg);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      min-height: 45px;
      padding: 5px;
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice {
      background-color: var(--primary-color);
      color: white;
      border: none;
      border-radius: 6px;
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
      color: rgba(255, 255, 255, 0.8);
    }

    .select2-dropdown {
      background-color: var(--input-bg);
      border: 1px solid var(--border-color);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .select2-container--default .select2-results__option--highlighted[aria-selected] {
      background-color: var(--primary-color);
    }

    .scroll-top-btn {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 50px;
      height: 50px;
      background: var(--primary-color);
      color: white;
      border: none;
      border-radius: 50%;
      display: none;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      z-index: 1000;
    }

    .scroll-top-btn:hover {
      background: var(--primary-hover);
      transform: translateY(-2px);
    }
  </style>
</head>

<body>
  <section class="content-main" id="mainContent">
    <div class="content-wrapper">
      <h1 class="section-title">Add New Product</h1>

      <form id="productForm" enctype="multipart/form-data">
        <div id="cropModal" class="crop-modal">
          <div class="crop-modal-content">
            <span class="close-modal" onclick="closeCropModal()">Ã—</span>
            <h5>Crop Image</h5>
            <div class="crop-container">
              <img id="cropImage" src="" alt="Image to crop">
            </div>
            <div class="crop-buttons">
              <button class="crop-btn crop-btn-cancel" type="button" onclick="closeCropModal()">Cancel</button>
              <button class="crop-btn crop-btn-crop" type="button" id="cropBtn">Crop</button>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-lg-8">
            <div class="card">
              <div class="card-header">
                <h5 class="card-title"><i class="fas fa-info-circle me-2"></i> Basic Information</h5>
              </div>
              <div class="card-body">
                <div class="form-section">
                  <div class="mb-4">
                    <label for="productName" class="form-label required-label">Product Name</label>
                    <input type="text" placeholder="Enter product name" name="productName" class="form-control" id="productName">
                    <div id="productName-error" class="error-message"></div>
                  </div>
                  <br>
                  <div class="row">
                    <div class="col-md-6 mb-4">
                      <label class="form-label required-label">Category</label>
                      <select class="form-select" name="category" id="category">
                        <% for(let i=0; i<cat.length; i++) { %>
                        <option value="<%= cat[i]._id %>"><%= cat[i].name %></option>
                        <% } %>
                      </select>
                      <div id="category-error" class="error-message"></div>
                    </div>
                    <br>
                    <div class="col-md-6 mb-4">
                      <label class="form-label required-label">Gender</label>
                      <select class="form-select" name="gender" id="gender">
                        <option value="">Select Gender</option>
                        <option value="Men">Men</option>
                        <option value="Women">Women</option>
                        <option value="Kids">Kids</option>
                        <option value="Unisex">Unisex</option>
                      </select>
                      <div id="gender-error" class="error-message"></div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-6 mb-4">
                      <label for="productType" class="form-label required-label">Fragrance Type</label>
                      <input type="text" placeholder="Enter Fragrance Type" name="productType" class="form-control" id="productType">
                      <div id="productType-error" class="error-message"></div>
                    </div>
                    <div class="col-md-6 mb-4">
                      <label for="fragranceFamily" class="form-label required-label">Fragrance Family</label>
                      <input type="text" placeholder="Enter Fragrance Family" name="fragranceFamily" class="form-control" id="fragranceFamily">
                      <div id="fragranceFamily-error" class="error-message"></div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-6 mb-4">
                      <label for="longevity" class="form-label required-label">Fragrance Longevity</label>
                      <input type="text" placeholder="Enter Fragrance Longevity" name="longevity" class="form-control" id="longevity">
                      <div id="longevity-error" class="error-message"></div>
                    </div>
                    <div class="col-md-6 mb-4">
                      <label for="brand" class="form-label required-label">Brand</label>
                      <input type="text" placeholder="Enter Brand Name" name="brand" class="form-control" id="brand">
                      <div id="brand-error" class="error-message"></div>
                    </div>
                  </div>
                  <div class="mb-4">
                    <label for="usage" class="form-label required-label">Usage</label>
                    <input type="text" placeholder="Enter the Usage" name="usage" class="form-control" id="usage">
                    <div id="usage-error" class="error-message"></div>
                  </div>
                  <div class="mb-4">
                    <label for="shortDescription" class="form-label required-label">Short Description</label>
                    <input type="text" placeholder="Enter Short Product Description" name="shortDescription" class="form-control" id="shortDescription">
                    <div id="shortDescription-error" class="error-message"></div>
                  </div>
                </div>
                <div class="form-section">
                  <h6 class="form-section-title">Product Description</h6>
                  <div class="mb-4">
                    <textarea placeholder="Enter detailed product description" id="productDescription" name="description" class="form-control" rows="5"></textarea>
                    <div id="description-error" class="error-message"></div>
                  </div>
                </div>
              </div>
            </div>

            <div class="card">
              <div class="card-header">
                <h5 class="card-title"><i class="fas fa-cubes me-2"></i> Product Variants</h5>
              </div>
              <div class="card-body">
                <div id="variants-error" class="error-message"></div>
                <div id="variants-container">
                  <!-- Variant 1 -->
                  <div class="variant-section" id="variant-1">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                      <h6 class="form-section-title mb-0">Variant 1</h6>
                      <div class="variant-actions">
                        <button type="button" class="btn btn-sm btn-primary" id="add-variant-btn" onclick="addVariant()">
                          <i class="fas fa-plus"></i> Add Variant
                        </button>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-md-4 mb-4">
                        <label class="form-label required-label">Size</label>
                        <select class="form-select variant-size" name="variants[0][size]">
                          <option value="">Select Size</option>
                          <option value="20">20 ml</option>
                          <option value="50">50 ml</option>
                          <option value="100">100 ml</option>
                          <option value="150">150 ml</option>
                          <option value="200">200 ml</option>
                          <option value="250">250 ml</option>
                        </select>
                        <div class="error-message size-error"></div>
                      </div>
                      <div class="col-md-4 mb-4">
                        <label class="form-label required-label">SKU</label>
                        <input type="text" placeholder="SKU identifier" name="variants[0][sku]" class="form-control variant-sku">
                        <div class="error-message sku-error"></div>
                      </div>
                      <div class="col-md-4 mb-4">
                        <label class="form-label required-label">Quantity</label>
                        <input placeholder="Stock quantity" name="variants[0][quantity]" type="number" min="0" class="form-control variant-quantity">
                        <div class="error-message quantity-error"></div>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-md-6 mb-4">
                        <label class="form-label required-label">Price</label>
                        <div class="price-input-group">
                          <input placeholder="0.00" name="variants[0][salePrice]" type="number" step="0.01" min="0" class="form-control variant-sale-price">
                        </div>
                        <div class="error-message sale-price-error"></div>
                      </div>
                    </div>
                    <hr class="mb-4">
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="col-lg-4">
            <div class="card">
              <div class="card-header">
                <h5 class="card-title"><i class="fas fa-images me-2"></i> Product Images</h5>
              </div>
              <div class="card-body">
                <label class="form-label required-label">Product Images (3 to 5 images):</label>
                <div class="image-upload-container">
                  <input type="file" name="images" id="productImages" accept="image/png, image/jpeg, image/jpg, image/webp" multiple onchange="handleFileSelect(event)">
                  <p>Click or drag to upload images (PNG, JPEG, WebP)</p>
                </div>
                <div id="images-error" class="error-message"></div>
                <div class="mt-2">
                  <span class="text-muted" style="font-size: 12px;">Only PNG, JPEG, and WebP formats supported</span>
                </div>
                <div id="croppedThumbnails" class="thumbnails-container"></div>
              </div>
            </div>

            <div class="card">
              <div class="card-body">
                <div class="button-group">
                  <a href="/admin/product" class="btn-back-inline" style="text-decoration: none;">
                    <i class="fas fa-arrow-left"></i> Back
                  </a>
                  <button class="btn btn-publish btn-publish-inline" type="submit" onclick="validateAndSubmit(event)">
                    <i class="fas fa-cloud-upload-alt"></i> Publish Product
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  </section>

  <button id="scrollTopBtn" class="scroll-top-btn" onclick="scrollToTop()">
    <i class="fas fa-arrow-up"></i>
  </button>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    // Variant Management
    let variantCount = 1;
    const MAX_VARIANTS = 5;

    function addVariant() {
      if (variantCount >= MAX_VARIANTS) {
        Swal.fire({
          icon: 'warning',
          title: 'Maximum Limit Reached',
          text: 'You can add a maximum of 5 variants.',
          confirmButtonText: 'OK'
        });
        return;
      }

      variantCount++;
      const newVariantId = `variant-${variantCount}`;
      const variantIndex = variantCount - 1;

      const variantHTML = `
                <div class="variant-section" id="${newVariantId}">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="form-section-title mb-0">Variant ${variantCount}</h6>
                        <div class="variant-actions">
                            <button type="button" class="btn btn-sm btn-danger" onclick="removeVariant('${newVariantId}')">
                                <i class="fas fa-trash"></i> Remove
                            </button>
                            <button type="button" class="btn btn-sm btn-primary" id="add-variant-btn" onclick="addVariant()" style="display: none;">
                                <i class="fas fa-plus"></i> Add Variant
                            </button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 mb-4">
                            <label class="form-label required-label">Size</label>
                            <select class="form-select variant-size" name="variants[${variantIndex}][size]">
                                <option value="">Select Size</option>
                                <option value="20">20 ml</option>
                                <option value="50">50 ml</option>
                                <option value="100">100 ml</option>
                                <option value="150">150 ml</option>
                                <option value="200">200 ml</option>
                                <option value="250">250 ml</option>
                            </select>
                            <div class="error-message size-error"></div>
                        </div>
                        <div class="col-md-4 mb-4">
                            <label class="form-label required-label">SKU</label>
                            <input type="text" placeholder="SKU identifier" name="variants[${variantIndex}][sku]" class="form-control variant-sku">
                            <div class="error-message sku-error"></div>
                        </div>
                        <div class="col-md-4 mb-4">
                            <label class="form-label required-label">Quantity</label>
                            <input placeholder="Stock quantity" name="variants[${variantIndex}][quantity]" type="number" min="0" class="form-control variant-quantity">
                            <div class="error-message quantity-error"></div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-4">
                            <label class="form-label required-label">Price</label>
                            <div class="price-input-group">
                                <input placeholder="0.00" name="variants[${variantIndex}][salePrice]" type="number" step="0.01" min="0" class="form-control variant-sale-price">
                            </div>
                            <div class="error-message sale-price-error"></div>
                        </div>
                    </div>
                    <hr class="mb-4">
                </div>
            `;

      document.getElementById('variants-container').insertAdjacentHTML('beforeend', variantHTML);
      updateAddVariantButtonVisibility();
      updateSizeOptions();
    }

    function removeVariant(variantId) {
      document.getElementById(variantId).remove();
      variantCount--;
      reindexVariants();
      updateAddVariantButtonVisibility();
      updateSizeOptions();
    }

    function reindexVariants() {
      const variantSections = document.querySelectorAll('.variant-section');
      variantSections.forEach((section, index) => {
        section.id = `variant-${index + 1}`;
        section.querySelector('.form-section-title').textContent = `Variant ${index + 1}`;

        const fields = section.querySelectorAll('input, select');
        fields.forEach(field => {
          const name = field.getAttribute('name');
          if (name) {
            field.setAttribute('name', name.replace(/variants\[\d+\]/, `variants[${index}]`));
          }
        });

        const removeBtn = section.querySelector('.btn-danger');
        if (removeBtn) {
          removeBtn.setAttribute('onclick', `removeVariant('variant-${index + 1}')`);
        }
      });
    }

    function updateAddVariantButtonVisibility() {
      const addBtn = document.getElementById('add-variant-btn');
      if (variantCount >= MAX_VARIANTS) {
        addBtn.style.display = 'none';
      } else {
        addBtn.style.display = 'inline-block';
      }

      document.querySelectorAll('.variant-actions').forEach((actionDiv, index) => {
        const addBtn = actionDiv.querySelector('#add-variant-btn');
        if (addBtn) {
          addBtn.style.display = index === variantCount - 1 ? 'inline-block' : 'none';
        }
      });
    }

    function updateSizeOptions() {
      const sizeSelects = document.querySelectorAll('.variant-size');
      const selectedSizes = Array.from(sizeSelects).map(select => select.value).filter(Boolean);

      sizeSelects.forEach(select => {
        const currentValue = select.value;
        Array.from(select.options).forEach(option => {
          if (option.value && option.value !== currentValue) {
            option.disabled = selectedSizes.includes(option.value);
          } else {
            option.disabled = false;
          }
        });
      });
    }

    // Form Validation
    function displayErrorMessage(element, message) {
      if (element) {
        element.innerText = message;
        element.style.display = 'block';
      }
    }

    function clearErrorMessages() {
      document.querySelectorAll('.error-message').forEach(el => {
        el.innerText = '';
        el.style.display = 'none';
      });
    }

    function validateForm() {
      clearErrorMessages();
      let isValid = true;

      // Basic Information
      const fields = [{
          id: 'productName',
          name: 'Product Name',
          required: true
        },
        {
          id: 'category',
          name: 'Category',
          required: true
        },
        {
          id: 'gender',
          name: 'Gender',
          required: true
        },
        {
          id: 'productType',
          name: 'Fragrance Type',
          required: true
        },
        {
          id: 'fragranceFamily',
          name: 'Fragrance Family',
          required: true
        },
        {
          id: 'longevity',
          name: 'Fragrance Longevity',
          required: true
        },
        {
          id: 'brand',
          name: 'Brand',
          required: true
        },
        {
          id: 'usage',
          name: 'Usage',
          required: true
        },
        {
          id: 'shortDescription',
          name: 'Short Description',
          required: true
        },
        {
          id: 'productDescription',
          name: 'Description',
          required: true
        }
      ];

      fields.forEach(field => {
        const input = document.getElementById(field.id);
        if (field.required && (!input.value || input.value.trim() === '')) {
          displayErrorMessage(document.getElementById(`${field.id}-error`), `${field.name} is required.`);
          isValid = false;
        }
      });

      // Product Name validation
      // Product Name validation
      const productName = document.getElementById('productName').value.trim();
      if (!/^(?=.*[A-Za-z])[A-Za-z\s-]+$/.test(productName)) {
        displayErrorMessage(document.getElementById('productName-error'), 'Product name must contain only letters, spaces, or hyphens, and include at least one letter.');
        isValid = false;
      } else if (!/^.{3,100}$/.test(productName)) {
        displayErrorMessage(document.getElementById('productName-error'), 'Product name must be between 3 and 100 characters.');
        isValid = false;
      }

      // Short Description validation
      const shortDescription = document.getElementById('shortDescription').value.trim();
      if (!/^.{10,200}$/.test(shortDescription)) {
        displayErrorMessage(document.getElementById('shortDescription-error'), 'Short description must be between 10 and 200 characters.');
        isValid = false;
      }

      // Variant Validation
      const variantSections = document.querySelectorAll('.variant-section');
      if (variantSections.length === 0) {
        displayErrorMessage(document.getElementById('variants-error'), 'At least one product variant is required.');
        isValid = false;
      }

      const sizes = [];
      variantSections.forEach((section) => {
        const sizeSelect = section.querySelector('.variant-size');
        const skuInput = section.querySelector('.variant-sku');
        const quantityInput = section.querySelector('.variant-quantity');
        const salePriceInput = section.querySelector('.variant-sale-price');

        // Size
        if (!sizeSelect.value) {
          displayErrorMessage(section.querySelector('.size-error'), 'Please select a size.');
          isValid = false;
        } else {
          sizes.push(sizeSelect.value);
        }

        // SKU
        const sku = skuInput.value.trim();
        if (!sku) {
          displayErrorMessage(section.querySelector('.sku-error'), 'SKU is required.');
          isValid = false;
        } else if (!/^[a-zA-Z0-9-_]+$/.test(sku)) {
          displayErrorMessage(section.querySelector('.sku-error'), 'SKU should contain only alphanumeric characters, hyphens, and underscores.');
          isValid = false;
        }

        // Quantity
        const quantity = parseInt(quantityInput.value);
        if (isNaN(quantity) || quantity < 0) {
          displayErrorMessage(section.querySelector('.quantity-error'), 'Please enter a valid non-negative quantity.');
          isValid = false;
        }

        // Sale Price (must be > 0 and no leading zeros)
        const salePriceValue = salePriceInput.value.trim();
        if (!/^(?!0\d)\d+(\.\d{1,2})?$/.test(salePriceValue) || parseFloat(salePriceValue) <= 0) {
          displayErrorMessage(section.querySelector('.sale-price-error'), 'Sale price must be a valid number greater than 0, without leading zeros.');
          isValid = false;
        }
      });

      // Check for duplicate sizes
      const uniqueSizes = [...new Set(sizes)];
      if (sizes.length !== uniqueSizes.length) {
        displayErrorMessage(document.getElementById('variants-error'), 'Each variant must have a unique size.');
        isValid = false;
      }

      // Image Validation
      const thumbnails = document.querySelectorAll('#croppedThumbnails .thumbnail');
      if (thumbnails.length < 3 || thumbnails.length > 5) {
        displayErrorMessage(document.getElementById('images-error'), 'Please upload between 3 and 5 images.');
        isValid = false;
      }

      return isValid;
    }


    // Form Submission with Fetch
    function validateAndSubmit(event) {
      event.preventDefault();
      if (validateForm()) {
        submitForm();
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Validation Error',
          text: 'Please fill all fields correctly. All fields are required!',
          confirmButtonText: 'OK'
        });
      }
    }

    async function submitForm() {
      const form = document.getElementById('productForm');
      const formData = new FormData();

      // Append form fields (excluding images)
      const inputs = form.querySelectorAll('input:not([type="file"]), select, textarea');
      inputs.forEach(input => {
        formData.append(input.name, input.value);
      });

      // Append cropped image blobs
      const thumbnails = document.querySelectorAll('#croppedThumbnails .thumbnail');
      thumbnails.forEach((thumbnail, index) => {
        const dataUrl = thumbnail.style.backgroundImage.slice(5, -2); // Remove 'url("")'
        const byteString = atob(dataUrl.split(',')[1]);
        const mimeString = dataUrl.split(',')[0].split(':')[1].split(';')[0];
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
          ia[i] = byteString.charCodeAt(i);
        }
        const blob = new Blob([ab], {
          type: mimeString
        });
        formData.append('images', blob, `cropped-image-${index}.jpg`);
      });

      // Show loading Swal
      Swal.fire({
        title: 'Uploading Product...',
        html: 'Please wait while we save your product.',
        allowOutsideClick: false,
        allowEscapeKey: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      try {
        const response = await fetch('/admin/addproduct', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (result.success) {
          Swal.fire({
            icon: 'success',
            title: 'Product Added',
            text: result.message,
            confirmButtonText: 'OK'
          }).then(() => {
            window.location.href = '/admin/product';
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: result.message,
            confirmButtonText: 'OK'
          });
        }
      } catch (error) {
        console.error('Submission error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Submission Error',
          text: 'An error occurred while submitting the form. Please try again.',
          confirmButtonText: 'OK'
        });
      }
    }

    // Image Cropping and Handling
    let cropper;
    let currentImageIndex = 0;
    let imagesToCrop = [];
    let croppedImages = [];

    function handleFileSelect(event) {
      const files = event.target.files;
      if (!files || files.length === 0) return;

      const allowedFormats = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp'];
      const totalImages = croppedImages.length + files.length;

      if (totalImages > 5) {
        Swal.fire({
          icon: 'warning',
          title: 'Maximum Limit Reached',
          text: 'You can upload a maximum of 5 images.',
          confirmButtonText: 'OK'
        });
        event.target.value = '';
        return;
      }

      imagesToCrop = [];
      for (let i = 0; i < files.length; i++) {
        if (!allowedFormats.includes(files[i].type)) {
          Swal.fire({
            icon: 'error',
            title: 'Invalid Format',
            text: 'Only PNG, JPEG, and WebP images are allowed.',
            confirmButtonText: 'OK'
          });
          event.target.value = '';
          return;
        }
        imagesToCrop.push(files[i]);
      }

      if (imagesToCrop.length > 0) {
        currentImageIndex = 0;
        processNextImage();
      }
    }

    function processNextImage() {
      if (currentImageIndex >= imagesToCrop.length) {
        // All images have been cropped, close the modal
        closeCropModal();
        return;
      }

      const file = imagesToCrop[currentImageIndex];
      const reader = new FileReader();
      reader.onload = function(e) {
        const img = document.getElementById('cropImage');
        img.src = e.target.result;
        document.getElementById('cropModal').style.display = 'block';

        if (cropper) {
          cropper.destroy();
        }
        cropper = new Cropper(img, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 0.8,
          responsive: true
        });
      };
      reader.readAsDataURL(file);
    }

    function closeCropModal() {
      document.getElementById('cropModal').style.display = 'none';
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      imagesToCrop = [];
      currentImageIndex = 0;
      document.getElementById('productImages').value = '';
    }

    document.getElementById('cropBtn').addEventListener('click', function() {
      if (cropper) {
        const canvas = cropper.getCroppedCanvas({
          width: 300,
          height: 300
        });
        const dataUrl = canvas.toDataURL('image/jpeg');

        const thumbnailWrapper = document.createElement('div');
        thumbnailWrapper.className = 'image-wrapper';
        const thumbnail = document.createElement('div');
        thumbnail.className = 'thumbnail';
        thumbnail.style.backgroundImage = `url(${dataUrl})`;
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'delete-image-btn';
        deleteBtn.innerHTML = 'Ã—';
        deleteBtn.onclick = () => removeImage(thumbnailWrapper);

        thumbnailWrapper.appendChild(thumbnail);
        thumbnailWrapper.appendChild(deleteBtn);
        document.getElementById('croppedThumbnails').appendChild(thumbnailWrapper);

        croppedImages.push(dataUrl);

        currentImageIndex++;
        processNextImage();
      }
    });

    function removeImage(thumbnailWrapper) {
      const index = Array.from(document.querySelectorAll('#croppedThumbnails .thumbnail')).findIndex(
        thumb => thumb.parentElement === thumbnailWrapper
      );
      croppedImages.splice(index, 1);
      thumbnailWrapper.remove();
    }

    function scrollToTop() {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    }

    window.addEventListener('scroll', function() {
      const btn = document.getElementById('scrollTopBtn');
      btn.style.display = window.scrollY > 300 ? 'flex' : 'none';
    });

    document.addEventListener('change', function(e) {
      if (e.target.classList.contains('variant-size')) {
        updateSizeOptions();
      }
    });

    document.addEventListener('DOMContentLoaded', function() {
      updateSizeOptions();
      updateAddVariantButtonVisibility();
      $('select[name="category"]').select2();
    });
  </script>
</body>

</html>