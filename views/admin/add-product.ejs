<%- include("../../views/partials/admin/header") %>

<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="/styles/admin/addProduct.css">
</head>
<body>
  <section class="content-main" id="mainContent">
    <div class="content-wrapper">
      <h1 class="section-title">Add New Product</h1>

      <form id="productForm" enctype="multipart/form-data">
        <div id="cropModal" class="crop-modal">
          <div class="crop-modal-content">
            <span class="close-modal" onclick="closeCropModal()">Ã—</span>
            <h5>Crop Image</h5>
            <div class="crop-container">
              <img id="cropImage" src="" alt="Image to crop">
            </div>
            <div class="crop-buttons">
              <button class="crop-btn crop-btn-cancel" type="button" onclick="closeCropModal()">Cancel</button>
              <button class="crop-btn crop-btn-crop" type="button" id="cropBtn">Crop</button>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-lg-8">
            <div class="card">
              <div class="card-header">
                <h5 class="card-title"><i class="fas fa-info-circle me-2"></i> Basic Information</h5>
              </div>
              <div class="card-body">
                <div class="form-section">
                  <div class="mb-4">
                    <label for="productName" class="form-label required-label">Product Name</label>
                    <input type="text" placeholder="Enter product name" name="productName" class="form-control" id="productName">
                    <div id="productName-error" class="error-message"></div>
                  </div>
                  <div class="row">
                    <div class="col-md-6 mb-4">
                      <label class="form-label required-label">Category</label>
                      <select class="form-select" name="category" id="category">
                        <% for(let i=0; i<cat.length; i++) { %>
                        <option value="<%= cat[i]._id %>"><%= cat[i].name %></option>
                        <% } %>
                      </select>
                      <div id="category-error" class="error-message"></div>
                    </div>
                    <div class="col-md-6 mb-4">
                      <label class="form-label required-label">Gender</label>
                      <select class="form-select" name="gender" id="gender">
                        <option value="">Select Gender</option>
                        <option value="Men">Men</option>
                        <option value="Women">Women</option>
                        <option value="Kids">Kids</option>
                        <option value="Unisex">Unisex</option>
                      </select>
                      <div id="gender-error" class="error-message"></div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-6 mb-4">
                      <label for="productType" class="form-label required-label">Fragrance Type</label>
                      <input type="text" placeholder="Enter Fragrance Type" name="productType" class="form-control" id="productType">
                      <div id="productType-error" class="error-message"></div>
                    </div>
                    <div class="col-md-6 mb-4">
                      <label for="fragranceFamily" class="form-label required-label">Fragrance Family</label>
                      <input type="text" placeholder="Enter Fragrance Family" name="fragranceFamily" class="form-control" id="fragranceFamily">
                      <div id="fragranceFamily-error" class="error-message"></div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-6 mb-4">
                      <label for="longevity" class="form-label required-label">Fragrance Longevity</label>
                      <input type="text" placeholder="Enter Fragrance Longevity" name="longevity" class="form-control" id="longevity">
                      <div id="longevity-error" class="error-message"></div>
                    </div>
                    <div class="col-md-6 mb-4">
                      <label for="brand" class="form-label required-label">Brand</label>
                      <input type="text" placeholder="Enter Brand Name" name="brand" class="form-control" id="brand">
                      <div id="brand-error" class="error-message"></div>
                    </div>
                  </div>
                  <div class="mb-4">
                    <label for="usage" class="form-label required-label">Usage</label>
                    <input type="text" placeholder="Enter the Usage" name="usage" class="form-control" id="usage">
                    <div id="usage-error" class="error-message"></div>
                  </div>
                  <div class="mb-4">
                    <label for="shortDescription" class="form-label required-label">Short Description</label>
                    <input type="text" placeholder="Enter Short Product Description" name="shortDescription" class="form-control" id="shortDescription">
                    <div id="shortDescription-error" class="error-message"></div>
                  </div>
                </div>
                <div class="form-section">
                  <h6 class="form-section-title">Product Description</h6>
                  <div class="mb-4">
                    <textarea placeholder="Enter detailed product description" id="productDescription" name="description" class="form-control" rows="5"></textarea>
                    <div id="description-error" class="error-message"></div>
                  </div>
                </div>
              </div>
            </div>

            <div class="card">
              <div class="card-header">
                <h5 class="card-title"><i class="fas fa-cubes me-2"></i> Product Variants</h5>
              </div>
              <div class="card-body">
                <div id="variants-error" class="error-message"></div>
                <div id="variants-container">
                  <div class="variant-section" id="variant-1">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                      <h6 class="form-section-title mb-0">Variant 1</h6>
                      <div class="variant-actions">
                        <button type="button" class="btn btn-sm btn-primary" id="add-variant-btn" onclick="addVariant()">
                          <i class="fas fa-plus"></i> Add Variant
                        </button>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-md-4 mb-4">
                        <label class="form-label required-label">Size</label>
                        <select class="form-select variant-size" name="variants[0][size]">
                          <option value="">Select Size</option>
                          <option value="20">20 ml</option>
                          <option value="50">50 ml</option>
                          <option value="100">100 ml</option>
                          <option value="150">150 ml</option>
                          <option value="200">200 ml</option>
                          <option value="250">250 ml</option>
                        </select>
                        <div class="error-message size-error"></div>
                      </div>
                      <div class="col-md-4 mb-4">
                        <label class="form-label required-label">SKU</label>
                        <input type="text" placeholder="SKU identifier" name="variants[0][sku]" class="form-control variant-sku">
                        <div class="error-message sku-error"></div>
                      </div>
                      <div class="col-md-4 mb-4">
                        <label class="form-label required-label">Quantity</label>
                        <input placeholder="Stock quantity" name="variants[0][quantity]" type="number" min="0" class="form-control variant-quantity">
                        <div class="error-message quantity-error"></div>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-md-6 mb-4">
                        <label class="form-label required-label">Price</label>
                        <div class="price-input-group">
                          <input placeholder="0.00" name="variants[0][salePrice]" type="number" step="0.01" min="0" class="form-control variant-sale-price">
                        </div>
                        <div class="error-message sale-price-error"></div>
                      </div>
                    </div>
                    <hr class="mb-4">
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="col-lg-4">
            <div class="card">
              <div class="card-header">
                <h5 class="card-title"><i class="fas fa-images me-2"></i> Product Images</h5>
              </div>
              <div class="card-body">
                <label class="form-label required-label">Product Images (3 to 5 images):</label>
                <div class="image-upload-container">
                  <input type="file" name="images" id="productImages" accept="image/png, image/jpeg, image/jpg, image/webp" multiple onchange="handleFileSelect(event)">
                  <p>Click or drag to upload images (PNG, JPEG, WebP)</p>
                </div>
                <div id="images-error" class="error-message"></div>
                <div class="mt-2">
                  <span class="text-muted" style="font-size: 12px;">Only PNG, JPEG, and WebP formats supported</span>
                </div>
                <div id="croppedThumbnails" class="thumbnails-container"></div>
              </div>
            </div>

            <div class="card">
              <div class="card-body">
                <div class="button-group">
                  <a href="/admin/product" class="btn-back-inline" style="text-decoration: none;">
                    <i class="fas fa-arrow-left"></i> Back
                  </a>
                  <button class="btn btn-publish btn-publish-inline" type="submit" onclick="validateAndSubmit(event)">
                    <i class="fas fa-cloud-upload-alt"></i> Publish Product
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  </section>

  <button id="scrollTopBtn" class="scroll-top-btn" onclick="scrollToTop()">
    <i class="fas fa-arrow-up"></i>
  </button>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
   // Variant Management
    let variantCount = 1;
    const MAX_VARIANTS = 5;

    function addVariant() {
      if (variantCount >= MAX_VARIANTS) {
        Swal.fire({
          icon: 'warning',
          title: 'Maximum Limit Reached',
          text: 'You can add a maximum of 5 variants.',
          confirmButtonText: 'OK'
        });
        return;
      }

      variantCount++;
      const newVariantId = `variant-${variantCount}`;
      const variantIndex = variantCount - 1;

      const variantHTML = `
        <div class="variant-section" id="${newVariantId}">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h6 class="form-section-title mb-0">Variant ${variantCount}</h6>
            <div class="variant-actions">
              <button type="button" class="btn btn-sm btn-danger" onclick="removeVariant('${newVariantId}')">
                <i class="fas fa-trash"></i> Remove
              </button>
              <button type="button" class="btn btn-sm btn-primary" id="add-variant-btn" onclick="addVariant()" style="display: none;">
                <i class="fas fa-plus"></i> Add Variant
              </button>
            </div>
          </div>
          <div class="row">
            <div class="col-md-4 mb-4">
              <label class="form-label required-label">Size</label>
              <select class="form-select variant-size" name="variants[${variantIndex}][size]">
                <option value="">Select Size</option>
                <option value="20">20 ml</option>
                <option value="50">50 ml</option>
                <option value="100">100 ml</option>
                <option value="150">150 ml</option>
                <option value="200">200 ml</option>
                <option value="250">250 ml</option>
              </select>
              <div class="error-message size-error"></div>
            </div>
            <div class="col-md-4 mb-4">
              <label class="form-label required-label">SKU</label>
              <input type="text" placeholder="SKU identifier" name="variants[${variantIndex}][sku]" class="form-control variant-sku">
              <div class="error-message sku-error"></div>
            </div>
            <div class="col-md-4 mb-4">
              <label class="form-label required-label">Quantity</label>
              <input placeholder="Stock quantity" name="variants[${variantIndex}][quantity]" type="number" min="0" class="form-control variant-quantity">
              <div class="error-message quantity-error"></div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-4">
              <label class="form-label required-label">Price</label>
              <div class="price-input-group">
                <input placeholder="0.00" name="variants[${variantIndex}][salePrice]" type="text" pattern="^(?!0\\d)\\d+(\\.\\d{1,2})?$" class="form-control variant-sale-price">
              </div>
              <div class="error-message sale-price-error"></div>
            </div>
          </div>
          <hr class="mb-4">
        </div>
      `;

      document.getElementById('variants-container').insertAdjacentHTML('beforeend', variantHTML);
      updateAddVariantButtonVisibility();
      updateSizeOptions();
    }

    function removeVariant(variantId) {
      document.getElementById(variantId).remove();
      variantCount--;
      reindexVariants();
      updateAddVariantButtonVisibility();
      updateSizeOptions();
      Swal.fire({
        position: 'top-end',
        icon: 'success',
        title: 'Variant removed',
        showConfirmButton: false,
        timer: 1500,
        toast: true
      });
    }

    function reindexVariants() {
      const variantSections = document.querySelectorAll('.variant-section');
      variantSections.forEach((section, index) => {
        section.id = `variant-${index + 1}`;
        section.querySelector('.form-section-title').textContent = `Variant ${index + 1}`;

        const fields = section.querySelectorAll('input, select');
        fields.forEach(field => {
          const name = field.getAttribute('name');
          if (name) {
            field.setAttribute('name', name.replace(/variants\[\d+\]/, `variants[${index}]`));
          }
        });

        const removeBtn = section.querySelector('.btn-danger');
        if (removeBtn) {
          removeBtn.setAttribute('onclick', `removeVariant('variant-${index + 1}')`);
        }
      });
    }

    function updateAddVariantButtonVisibility() {
      const addBtn = document.getElementById('add-variant-btn');
      if (variantCount >= MAX_VARIANTS) {
        addBtn.style.display = 'none';
      } else {
        addBtn.style.display = 'inline-block';
      }

      document.querySelectorAll('.variant-actions').forEach((actionDiv, index) => {
        const addBtn = actionDiv.querySelector('#add-variant-btn');
        if (addBtn) {
          addBtn.style.display = index === variantCount - 1 ? 'inline-block' : 'none';
        }
      });
    }

    function updateSizeOptions() {
      const sizeSelects = document.querySelectorAll('.variant-size');
      const selectedSizes = Array.from(sizeSelects).map(select => select.value).filter(Boolean);

      sizeSelects.forEach(select => {
        const currentValue = select.value;
        Array.from(select.options).forEach(option => {
          if (option.value && option.value !== currentValue) {
            option.disabled = selectedSizes.includes(option.value);
          } else {
            option.disabled = false;
          }
        });
      });
    }

    // Form Validation
    function displayErrorMessage(element, message) {
      console.log('Attempting to display error:', message, 'on element:', element);
      if (element) {
        element.innerText = message;
        element.style.display = 'block';
      } else {
        console.error('Error element not found for displaying message:', message);
      }
    }

    function clearErrorMessage(element) {
      console.log('Clearing error on element:', element);
      if (element) {
        element.innerText = '';
        element.style.display = 'none';
      } else {
        console.error('Error element not found for clearing');
      }
    }

    function validateForm() {
      clearErrorMessages();
      let isValid = true;

      // Basic Information
      const fields = [
        { id: 'productName', name: 'Product Name', required: true },
        { id: 'category', name: 'Category', required: true },
        { id: 'gender', name: 'Gender', required: true },
        { id: 'productType', name: 'Fragrance Type', required: true },
        { id: 'fragranceFamily', name: 'Fragrance Family', required: true },
        { id: 'longevity', name: 'Fragrance Longevity', required: true },
        { id: 'brand', name: 'Brand', required: true },
        { id: 'usage', name: 'Usage', required: true },
        { id: 'shortDescription', name: 'Short Description', required: true },
        { id: 'productDescription', name: 'Description', required: true }
      ];

      fields.forEach(field => {
        const input = document.getElementById(field.id);
        if (field.required && (!input.value || input.value.trim() === '')) {
          displayErrorMessage(document.getElementById(`${field.id}-error`), `${field.name} is required.`);
          isValid = false;
        }
      });

      // Product Name validation
      const productName = document.getElementById('productName').value.trim();
      if (!/^(?=.*[A-Za-z])[A-Za-z\s-]+$/.test(productName)) {
        displayErrorMessage(document.getElementById('productName-error'), 'Product name must contain only letters, spaces, or hyphens, and include at least one letter.');
        isValid = false;
      } else if (!/^.{3,100}$/.test(productName)) {
        displayErrorMessage(document.getElementById('productName-error'), 'Product name must be between 3 and 100 characters.');
        isValid = false;
      }

      // Short Description validation
      const shortDescription = document.getElementById('shortDescription').value.trim();
      if (!/^.{10,200}$/.test(shortDescription)) {
        displayErrorMessage(document.getElementById('shortDescription-error'), 'Short description must be between 10 and 200 characters.');
        isValid = false;
      }

      // Variant Validation
      const variantSections = document.querySelectorAll('.variant-section');
      if (variantSections.length === 0) {
        displayErrorMessage(document.getElementById('variants-error'), 'At least one product variant is required.');
        isValid = false;
      }

      const sizes = [];
      variantSections.forEach((section) => {
        const sizeSelect = section.querySelector('.variant-size');
        const skuInput = section.querySelector('.variant-sku');
        const quantityInput = section.querySelector('.variant-quantity');
        const salePriceInput = section.querySelector('.variant-sale-price');

        // Size
        if (!sizeSelect.value) {
          displayErrorMessage(section.querySelector('.size-error'), 'Please select a size.');
          isValid = false;
        } else {
          sizes.push(sizeSelect.value);
        }

        // SKU
        const sku = skuInput.value.trim();
        if (!sku) {
          displayErrorMessage(section.querySelector('.sku-error'), 'SKU is required.');
          isValid = false;
        } else if (!/^[a-zA-Z0-9-_]+$/.test(sku)) {
          displayErrorMessage(section.querySelector('.sku-error'), 'SKU should contain only alphanumeric characters, hyphens, and underscores.');
          isValid = false;
        }

        // Quantity
        const quantityStr = quantityInput.value.trim();
        const isValidQuantityFormat = /^([1-9]\d*|0)$/.test(quantityStr);
        if (!isValidQuantityFormat) {
          displayErrorMessage(section.querySelector('.quantity-error'), 'Please enter a valid non-negative quantity without leading zeros.');
          isValid = false;
        }

        // Sale Price
        const salePriceValue = salePriceInput.value.trim();
        const salePriceNum = parseFloat(salePriceValue);
        if (!salePriceValue) {
          displayErrorMessage(section.querySelector('.sale-price-error'), 'Price is required.');
          isValid = false;
        } else if (!/^(?!0\d)\d+(\.\d{1,2})?$/.test(salePriceValue) || salePriceNum <= 0 || salePriceNum > 100000) {
          displayErrorMessage(section.querySelector('.sale-price-error'), 'Price must be a valid number greater than 0 and up to 100,000, without leading zeros.');
          isValid = false;
        }
      });

      // Check for duplicate sizes
      const uniqueSizes = [...new Set(sizes)];
      if (sizes.length !== uniqueSizes.length) {
        displayErrorMessage(document.getElementById('variants-error'), 'Each variant must have a unique size.');
        isValid = false;
      }

      // Image Validation
      const thumbnails = document.querySelectorAll('#croppedThumbnails .thumbnail');
      if (thumbnails.length < 3 || thumbnails.length > 5) {
        displayErrorMessage(document.getElementById('images-error'), 'Please upload between 3 and 5 images.');
        isValid = false;
      }

      console.log('Form validation result:', isValid);
      return isValid;
    }

    function setupRealTimeValidation() {
      const fields = [
        { id: 'productName', name: 'Product Name', required: true },
        { id: 'category', name: 'Category', required: true },
        { id: 'gender', name: 'Gender', required: true },
        { id: 'productType', name: 'Fragrance Type', required: true },
        { id: 'fragranceFamily', name: 'Fragrance Family', required: true },
        { id: 'longevity', name: 'Fragrance Longevity', required: true },
        { id: 'brand', name: 'Brand', required: true },
        { id: 'usage', name: 'Usage', required: true },
        { id: 'shortDescription', name: 'Short Description', required: true },
        { id: 'productDescription', name: 'Description', required: true }
      ];

      fields.forEach(field => {
        const element = document.getElementById(field.id);
        if (element) {
          element.addEventListener('input', () => {
            console.log('Input event on:', field.id);
            validateField(element, field);
          });
          element.addEventListener('change', () => {
            console.log('Change event on:', field.id);
            validateField(element, field);
          });
        }
      });

      document.getElementById('variants-container').addEventListener('input', (e) => {
        if (
          e.target.classList.contains('variant-size') ||
          e.target.classList.contains('variant-sku') ||
          e.target.classList.contains('variant-quantity') ||
          e.target.classList.contains('variant-sale-price')
        ) {
          console.log('Input event on variant field:', e.target.className, 'Value:', e.target.value);
          validateField(e.target);
        }
      });

      document.getElementById('variants-container').addEventListener('change', (e) => {
        if (e.target.classList.contains('variant-size')) {
          console.log('Change event on variant-size');
          validateField(e.target);
          updateSizeOptions();
        }
      });
    }

    function validateField(element, fieldConfig = null) {
      const errorElement = element.closest('.mb-4').querySelector('.error-message');
      let isValid = true;
      let errorMessage = '';

      console.log('Validating field:', element.className, 'Value:', element.value, 'Error element:', errorElement);

      if (element.classList.contains('variant-size')) {
        if (!element.value) {
          isValid = false;
          errorMessage = 'Please select a size.';
        }
      } else if (element.classList.contains('variant-sku')) {
        const sku = element.value.trim();
        if (!sku) {
          isValid = false;
          errorMessage = 'SKU is required.';
        } else if (!/^[a-zA-Z0-9-_]+$/.test(sku)) {
          isValid = false;
          errorMessage = 'SKU should contain only alphanumeric characters, hyphens, and underscores.';
        }
      } else if (element.classList.contains('variant-quantity')) {
        const quantityStr = element.value.trim();
        const isValidQuantityFormat = /^([1-9]\d*|0)$/.test(quantityStr);
        if (!isValidQuantityFormat && quantityStr !== '') {
          isValid = false;
          errorMessage = 'Please enter a valid non-negative quantity without leading zeros.';
        }
      } else if (element.classList.contains('variant-sale-price')) {
        const salePriceValue = element.value.trim();
        const salePriceNum = parseFloat(salePriceValue);
        console.log('Sale price validation:', {
          value: salePriceValue,
          regexTest: /^(?!0\d)\d+(\.\d{1,2})?$/.test(salePriceValue),
          isPositive: salePriceNum > 0,
          isWithinLimit: salePriceNum <= 100000,
          isEmpty: salePriceValue === ''
        });
        if (salePriceValue === '') {
          isValid = false;
          errorMessage = 'Price is required.';
        } else if (!/^(?!0\d)\d+(\.\d{1,2})?$/.test(salePriceValue) || salePriceNum <= 0 || salePriceNum > 100000) {
          isValid = false;
          errorMessage = 'Price must be a valid number greater than 0 and up to 100,000, without leading zeros.';
        }
      } else if (fieldConfig) {
        if (fieldConfig.required && (!element.value || element.value.trim() === '')) {
          isValid = false;
          errorMessage = `${fieldConfig.name} is required.`;
        } else if (element.id === 'productName') {
          const productName = element.value.trim();
          if (!/^(?=.*[A-Za-z])[A-Za-z\s-]+$/.test(productName)) {
            isValid = false;
            errorMessage = 'Product name must contain only letters, spaces, or hyphens, and include at least one letter.';
          } else if (!/^.{3,100}$/.test(productName)) {
            isValid = false;
            errorMessage = 'Product name must be between 3 and 100 characters.';
          }
        } else if (element.id === 'shortDescription') {
          const shortDescription = element.value.trim();
          if (!/^.{10,200}$/.test(shortDescription)) {
            isValid = false;
            errorMessage = 'Short description must be between 10 and 200 characters.';
          }
        }
      }

      if (!isValid) {
        console.log('Displaying error:', errorMessage, 'on:', errorElement);
        displayErrorMessage(errorElement, errorMessage);
      } else {
        console.log('Clearing error for:', element.className, 'on:', errorElement);
        clearErrorMessage(errorElement);
      }

      return isValid;
    }

    function clearErrorMessages() {
      document.querySelectorAll('.error-message').forEach(el => {
        console.log('Clearing error message on:', el);
        el.innerText = '';
        el.style.display = 'none';
      });
    }

    async function validateAndSubmit(event) {
      event.preventDefault();
      console.log('Submitting form...');
      if (validateForm()) {
        await submitForm();
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Validation Error',
          text: 'Please fill all fields correctly. All fields are required!',
          confirmButtonText: 'OK'
        });
      }
    }

    async function submitForm() {
      const form = document.getElementById('productForm');
      const formData = new FormData();

      // Append form fields
      const inputs = form.querySelectorAll('input:not([type="file"]), select, textarea');
      inputs.forEach(input => {
        formData.append(input.name, input.value.trim());
      });

      // Append cropped image blobs
      const thumbnails = document.querySelectorAll('#croppedThumbnails .thumbnail');
      thumbnails.forEach((thumbnail, index) => {
        const dataUrl = thumbnail.style.backgroundImage.slice(5, -2);
        const byteString = atob(dataUrl.split(',')[1]);
        const mimeString = dataUrl.split(',')[0].split(':')[1].split(';')[0];
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
          ia[i] = byteString.charCodeAt(i);
        }
        const blob = new Blob([ab], { type: mimeString });
        formData.append('images', blob, `cropped-image-${index}.jpg`);
      });

      
      for (let [key, value] of formData.entries()) {
        console.log(`FormData: ${key} =`, value);
      }

      Swal.fire({
        title: 'Uploading Product...',
        html: 'Please wait while we save your product.',
        allowOutsideClick: false,
        allowEscapeKey: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      try {
        const response = await fetch('/admin/addproduct', {
          method: 'POST',
          body: formData
        });

        console.log('Response status:', response.status);
        const result = await response.json();
        console.log('Response body:', result);

        if (result.success) {
          Swal.fire({
            icon: 'success',
            title: 'Product Added',
            text: result.message,
            confirmButtonText: 'OK'
          }).then(() => {
            window.location.href = '/admin/product';
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: result.message || 'Failed to add product.',
            confirmButtonText: 'OK'
          });
        }
      } catch (error) {
        console.error('Submission error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Submission Error',
          text: 'An error occurred while submitting the form. Please try again.',
          confirmButtonText: 'OK'
        });
      }
    }

    let cropper;
    let currentImageIndex = 0;
    let imagesToCrop = [];
    let croppedImages = [];

    function handleFileSelect(event) {
      const files = event.target.files;
      if (!files || files.length === 0) return;

      const allowedFormats = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp'];
      const totalImages = croppedImages.length + files.length;

      if (totalImages > 5) {
        Swal.fire({
          icon: 'warning',
          title: 'Maximum Limit Reached',
          text: 'You can upload a maximum of 5 images.',
          confirmButtonText: 'OK'
        });
        event.target.value = '';
        return;
      }

      imagesToCrop = [];
      for (let i = 0; i < files.length; i++) {
        if (!allowedFormats.includes(files[i].type)) {
          Swal.fire({
            icon: 'error',
            title: 'Invalid Format',
            text: 'Only PNG, JPEG, and WebP images are allowed.',
            confirmButtonText: 'OK'
          });
          event.target.value = '';
          return;
        }
        imagesToCrop.push(files[i]);
      }

      if (imagesToCrop.length > 0) {
        currentImageIndex = 0;
        processNextImage();
      }
    }

    function processNextImage() {
      if (currentImageIndex >= imagesToCrop.length) {
        closeCropModal();
        return;
      }

      const file = imagesToCrop[currentImageIndex];
      const reader = new FileReader();
      reader.onload = function(e) {
        const img = document.getElementById('cropImage');
        img.src = e.target.result;
        document.getElementById('cropModal').style.display = 'block';

        if (cropper) {
          cropper.destroy();
        }
        cropper = new Cropper(img, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 0.8,
          responsive: true
        });
      };
      reader.readAsDataURL(file);
    }

    function closeCropModal() {
      document.getElementById('cropModal').style.display = 'none';
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      imagesToCrop = [];
      currentImageIndex = 0;
      document.getElementById('productImages').value = '';
    }

    document.getElementById('cropBtn').addEventListener('click', function() {
      if (cropper) {
        const canvas = cropper.getCroppedCanvas({ width: 300, height: 300 });
        const dataUrl = canvas.toDataURL('image/jpeg');
        console.log('Cropped image:', dataUrl);

        const thumbnailWrapper = document.createElement('div');
        thumbnailWrapper.className = 'image-wrapper';
        const thumbnail = document.createElement('div');
        thumbnail.className = 'thumbnail';
        thumbnail.style.backgroundImage = `url(${dataUrl})`;
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'delete-image-btn';
        deleteBtn.innerHTML = 'Ã—';
        deleteBtn.onclick = () => removeImage(thumbnailWrapper);

        thumbnailWrapper.appendChild(thumbnail);
        thumbnailWrapper.appendChild(deleteBtn);
        document.getElementById('croppedThumbnails').appendChild(thumbnailWrapper);

        croppedImages.push(dataUrl);

        currentImageIndex++;
        processNextImage();
      }
    });

    function removeImage(thumbnailWrapper) {
      const index = Array.from(document.querySelectorAll('#croppedThumbnails .thumbnail')).findIndex(
        thumb => thumb.parentElement === thumbnailWrapper
      );
      croppedImages.splice(index, 1);
      thumbnailWrapper.remove();
      Swal.fire({
        position: 'top-end',
        icon: 'success',
        title: 'Image removed',
        showConfirmButton: false,
        timer: 1500,
        toast: true
      });
    }

    function scrollToTop() {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    window.addEventListener('scroll', function() {
      const btn = document.getElementById('scrollTopBtn');
      btn.style.display = window.scrollY > 300 ? 'flex' : 'none';
    });

    document.addEventListener('change', function(e) {
      if (e.target.classList.contains('variant-size')) {
        updateSizeOptions();
      }
    });

    document.addEventListener('DOMContentLoaded', function() {
      updateSizeOptions();
      updateAddVariantButtonVisibility();
      setupRealTimeValidation();
      $('select[name="category"]').select2();
    });
  </script>
</body>
</html>